{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    onClick: $options.selectDir\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"选择根目录\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_el_button","onClick","$options","selectDir","default","_withCtx","_createTextVNode","_"],"sources":["D:\\code\\lan\\LAN-Sharing\\restvue003\\src\\components\\selectedDir.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-button @click=\"selectDir\">选择根目录</el-button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { ElMessage, ElMessageBox } from 'element-plus';\r\n\r\nexport default {\r\n    name: 'SelectedDir',\r\n    methods: {\r\n        async selectDir() {\r\n            try {\r\n                const api = this.$store.state.api;\r\n                const response = await axios.post(`${api}/selectedDir`);\r\n                const dirname = response.data.data;\r\n\r\n                await this.showConfirmation(dirname);\r\n                if (dirname) {\r\n                    this.$store.state.DirPath = await this.handleDirSelection(dirname, api);\r\n                }\r\n            } catch (error) {\r\n                ElMessage({ type: 'error', message: '出错了: ' + error.message });\r\n            }\r\n        },\r\n\r\n        async showConfirmation(dirname) {\r\n            return ElMessageBox.confirm(dirname, '警告', {\r\n                confirmButtonText: '确定',\r\n                cancelButtonText: '取消',\r\n                type: 'warning',\r\n            });\r\n        },\r\n\r\n        async handleDirSelection(dirname, api) {\r\n            try {\r\n                const response = await axios.get(`${api}/SucceedselectedDir`, {\r\n                    params: { dirname }\r\n                });\r\n                const dirPath = response.data.data;\r\n                this.$store.state.DirPath = dirPath;\r\n                console.log(\"选择的目录路径:\", dirPath);\r\n                const dirsFileList = await this.fetchDirsFileList(dirPath, api);\r\n                this.$store.state.DirsFileList = dirsFileList;\r\n\r\n                return dirPath;\r\n            } catch (error) {\r\n                ElMessage({ type: 'error', message: '处理目录选择时出错: ' + error.message });\r\n            }\r\n        },\r\n\r\n        async fetchDirsFileList(dirPath, api) {\r\n            try {\r\n                const response = await axios.post(`${api}/DirsFileList`, {\r\n                    params: { DirsFileList: dirPath }\r\n                });\r\n                return this.processDirsFileList(response.data.data, api);\r\n            } catch (error) {\r\n                ElMessage({ type: 'error', message: '获取目录文件列表时出错: ' + error.message });\r\n            }\r\n        },\r\n\r\n        async processDirsFileList(dirsFileList, api) {\r\n            const updatedList = dirsFileList.map((item, index) => ({\r\n                index,\r\n                data: item,\r\n                FileType: false,\r\n            }));\r\n\r\n            try {\r\n                const openDirResponse = await axios.post(`${api}/OpenDir`);\r\n                const folders = Object.values(openDirResponse.data.su);\r\n\r\n                updatedList.forEach(dir => {\r\n                    if (folders.includes(dir.data)) {\r\n                        dir.FileType = '文件夹';\r\n                    }\r\n                });\r\n\r\n                const fileTypesResponse = await axios.get(`${api}/filesypess`, {\r\n                    params: { filesypessPath: this.$store.state.DirPath }\r\n                });\r\n\r\n                const fileTypes = Object.values(fileTypesResponse.data.filesypessPathlistTypes);\r\n                fileTypes.forEach(type => {\r\n                    updatedList[type.index].FileType = type.filesypessPathlistType;\r\n                });\r\n\r\n                return updatedList;\r\n            } catch (error) {\r\n                ElMessage({ type: 'error', message: '处理文件类型时出错: ' + error.message });\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n"],"mappings":";;;uBACIA,mBAAA,CAEM,cADFC,YAAA,CAA+CC,oBAAA;IAAnCC,OAAK,EAAEC,QAAA,CAAAC;EAAS;IAFpCC,OAAA,EAAAC,QAAA,CAEsC,MAAK,CAF3CC,gBAAA,CAEsC,OAAK,E;IAF3CC,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}