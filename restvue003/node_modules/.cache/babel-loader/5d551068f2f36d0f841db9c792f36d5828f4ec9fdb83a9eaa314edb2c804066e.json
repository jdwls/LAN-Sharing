{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    onClick: $options.selectDir\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"选择根目录\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_el_button","onClick","$options","selectDir","default","_withCtx","_createTextVNode","_"],"sources":["C:\\Users\\Admin\\Desktop\\LAN-Sharing-0.1.0\\restvue003\\src\\components\\selectedDir.vue"],"sourcesContent":["<template>\n    <div>\n        <el-button @click=\"selectDir\">选择根目录</el-button>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\n\nexport default {\n    name: 'SelectedDir',\n    methods: {\n        async selectDir() {\n            try {\n                const api = this.$store.state.api;\n                const response = await axios.post(`${api}/selectedDir`);\n                const dirname = response.data.data;\n\n                await this.showConfirmation(dirname);\n                if (dirname) {\n                    this.$store.state.DirPath = await this.handleDirSelection(dirname, api);\n                }\n            } catch (error) {\n                ElMessage({ type: 'error', message: '出错了: ' + error.message });\n            }\n        },\n\n        async showConfirmation(dirname) {\n            return ElMessageBox.confirm(dirname, '警告', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning',\n            });\n        },\n\n        async handleDirSelection(dirname, api) {\n            try {\n                const response = await axios.get(`${api}/SucceedselectedDir`, {\n                    params: { dirname }\n                });\n                const dirPath = response.data.data;\n                this.$store.state.DirPath = dirPath;\n                console.log(\"选择的目录路径:\", dirPath);\n                const dirsFileList = await this.fetchDirsFileList(dirPath, api);\n                this.$store.state.DirsFileList = dirsFileList;\n\n                return dirPath;\n            } catch (error) {\n                ElMessage({ type: 'error', message: '处理目录选择时出错: ' + error.message });\n            }\n        },\n\n        async fetchDirsFileList(dirPath, api) {\n            try {\n                const response = await axios.post(`${api}/DirsFileList`, {\n                    params: { DirsFileList: dirPath }\n                });\n                return this.processDirsFileList(response.data.data, api);\n            } catch (error) {\n                ElMessage({ type: 'error', message: '获取目录文件列表时出错: ' + error.message });\n            }\n        },\n\n        async processDirsFileList(dirsFileList, api) {\n            const updatedList = dirsFileList.map((item, index) => ({\n                index,\n                data: item,\n                FileType: false,\n            }));\n\n            try {\n                const openDirResponse = await axios.post(`${api}/OpenDir`);\n                const folders = Object.values(openDirResponse.data.su);\n\n                updatedList.forEach(dir => {\n                    if (folders.includes(dir.data)) {\n                        dir.FileType = '文件夹';\n                    }\n                });\n\n                const fileTypesResponse = await axios.get(`${api}/filesypess`, {\n                    params: { filesypessPath: this.$store.state.DirPath }\n                });\n\n                const fileTypes = Object.values(fileTypesResponse.data.filesypessPathlistTypes);\n                fileTypes.forEach(type => {\n                    updatedList[type.index].FileType = type.filesypessPathlistType;\n                });\n\n                return updatedList;\n            } catch (error) {\n                ElMessage({ type: 'error', message: '处理文件类型时出错: ' + error.message });\n            }\n        }\n    }\n}\n</script>\n"],"mappings":";;;uBACIA,mBAAA,CAEM,cADFC,YAAA,CAA+CC,oBAAA;IAAnCC,OAAK,EAAEC,QAAA,CAAAC;EAAS;IAFpCC,OAAA,EAAAC,QAAA,CAEsC,MAAK,CAF3CC,gBAAA,CAEsC,OAAK,E;IAF3CC,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}