{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"TopLevelDirectory\",\n  data() {\n    return {\n      isDisabled: false // 使用Vue的数据驱动控制按钮禁用状态\n    };\n  },\n  methods: {\n    async topleveldirectory() {\n      this.isDisabled = true; // 禁用按钮\n      let m = this.$store.state.DirPath.split('/');\n      try {\n        if (m.length > 2) {\n          // 如果目录层级大于2\n          const res = await this.getTopLevelDirectory();\n          if (res.data.data !== '') {\n            this.$store.state.DirPath = res.data.data;\n            await this.updateDirsFileList();\n          }\n        } else {\n          // 如果目录层级不大于2，走 OptionDir 流程\n          const res = await this.getOptionDir();\n          this.$store.state.DirPath = res.data.data;\n          await this.updateDirsFileList();\n        }\n      } finally {\n        // 无论成功与否都解除禁用\n        setTimeout(() => {\n          this.isDisabled = false;\n        }, 1000);\n      }\n    },\n    async getTopLevelDirectory() {\n      return axios({\n        url: this.$store.state.api + '/TopLevelDirectory',\n        method: 'get',\n        params: {\n          'TopLevelDirectoryPathName': this.$store.state.DirPath\n        }\n      });\n    },\n    async getOptionDir() {\n      return axios({\n        url: this.$store.state.api + '/OptionDir',\n        method: \"post\"\n      });\n    },\n    async updateDirsFileList() {\n      const res = await axios({\n        url: this.$store.state.api + '/DirsFileList',\n        method: \"post\",\n        params: {\n          'DirsFileList': this.$store.state.DirPath\n        }\n      });\n      let dirsFileList = res.data.data.map((item, index) => ({\n        index: index,\n        data: item,\n        FileType: false\n      }));\n\n      // 更新文件类型\n      const dirRes = await this.openDir();\n      const folderList = Object.values(dirRes.data.su);\n      dirsFileList = this.updateFileTypes(dirsFileList, folderList, '文件夹');\n\n      // 获取文件类型并更新\n      const fileTypeRes = await this.getFileTypes();\n      let fileTypes = Object.values(fileTypeRes.data.filesypessPathlistTypes);\n      fileTypes.forEach(type => {\n        dirsFileList[type.index].FileType = type.filesypessPathlistType;\n      });\n\n      // 更新 store 中的文件列表\n      this.$store.state.DirsFileList = dirsFileList;\n    },\n    async openDir() {\n      return axios({\n        url: this.$store.state.api + \"/OpenDir\",\n        method: 'post'\n      });\n    },\n    async getFileTypes() {\n      return axios({\n        url: this.$store.state.api + \"/filesypess\",\n        method: \"get\",\n        params: {\n          'filesypessPath': this.$store.state.DirPath\n        }\n      });\n    },\n    updateFileTypes(dirsFileList, folderList, folderType) {\n      dirsFileList.forEach(item => {\n        if (folderList.includes(item.data)) {\n          item.FileType = folderType;\n        }\n      });\n      return dirsFileList;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","isDisabled","methods","topleveldirectory","m","$store","state","DirPath","split","length","res","getTopLevelDirectory","updateDirsFileList","getOptionDir","setTimeout","url","api","method","params","dirsFileList","map","item","index","FileType","dirRes","openDir","folderList","Object","values","su","updateFileTypes","fileTypeRes","getFileTypes","fileTypes","filesypessPathlistTypes","forEach","type","filesypessPathlistType","DirsFileList","folderType","includes"],"sources":["C:\\Users\\Admin\\Desktop\\LAN-Sharing-0.1.0\\restvue003\\src\\components\\TopLevelDirectory.vue"],"sourcesContent":["<template>\n    <div>\n        <el-button :class=\"{ disabled: isDisabled }\" @click=\"topleveldirectory\" class=\"tets\">\n            返回上级目录\n        </el-button>\n    </div>\n</template>\n\n<script defer>\nimport axios from 'axios';\n\nexport default {\n    name: \"TopLevelDirectory\",\n    data() {\n        return {\n            isDisabled: false, // 使用Vue的数据驱动控制按钮禁用状态\n        };\n    },\n    methods: {\n        async topleveldirectory() {\n            this.isDisabled = true; // 禁用按钮\n            let m = this.$store.state.DirPath.split('/');\n\n            try {\n                if (m.length > 2) {\n                    // 如果目录层级大于2\n                    const res = await this.getTopLevelDirectory();\n                    if (res.data.data !== '') {\n                        this.$store.state.DirPath = res.data.data;\n                        await this.updateDirsFileList();\n                    }\n                } else {\n                    // 如果目录层级不大于2，走 OptionDir 流程\n                    const res = await this.getOptionDir();\n                    this.$store.state.DirPath = res.data.data;\n                    await this.updateDirsFileList();\n                }\n            } finally {\n                // 无论成功与否都解除禁用\n                setTimeout(() => {\n                    this.isDisabled = false;\n                }, 1000);\n            }\n        },\n\n        async getTopLevelDirectory() {\n            return axios({\n                url: this.$store.state.api + '/TopLevelDirectory',\n                method: 'get',\n                params: {\n                    'TopLevelDirectoryPathName': this.$store.state.DirPath\n                }\n            });\n        },\n\n        async getOptionDir() {\n            return axios({\n                url: this.$store.state.api + '/OptionDir',\n                method: \"post\"\n            });\n        },\n\n        async updateDirsFileList() {\n            const res = await axios({\n                url: this.$store.state.api + '/DirsFileList',\n                method: \"post\",\n                params: {\n                    'DirsFileList': this.$store.state.DirPath\n                }\n            });\n\n            let dirsFileList = res.data.data.map((item, index) => ({\n                index: index,\n                data: item,\n                FileType: false\n            }));\n\n            // 更新文件类型\n            const dirRes = await this.openDir();\n            const folderList = Object.values(dirRes.data.su);\n            dirsFileList = this.updateFileTypes(dirsFileList, folderList, '文件夹');\n\n            // 获取文件类型并更新\n            const fileTypeRes = await this.getFileTypes();\n            let fileTypes = Object.values(fileTypeRes.data.filesypessPathlistTypes);\n            fileTypes.forEach(type => {\n                dirsFileList[type.index].FileType = type.filesypessPathlistType;\n            });\n\n            // 更新 store 中的文件列表\n            this.$store.state.DirsFileList = dirsFileList;\n        },\n\n        async openDir() {\n            return axios({\n                url: this.$store.state.api + \"/OpenDir\",\n                method: 'post'\n            });\n        },\n\n        async getFileTypes() {\n            return axios({\n                url: this.$store.state.api + \"/filesypess\",\n                method: \"get\",\n                params: {\n                    'filesypessPath': this.$store.state.DirPath\n                }\n            });\n        },\n\n        updateFileTypes(dirsFileList, folderList, folderType) {\n            dirsFileList.forEach(item => {\n                if (folderList.includes(item.data)) {\n                    item.FileType = folderType;\n                }\n            });\n            return dirsFileList;\n        }\n    }\n};\n</script>\n\n<style scoped>\n.disabled {\n    pointer-events: none;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}