{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_VideoPlayer = _resolveComponent(\"VideoPlayer\");\n  return _ctx.$store.state.VideoPlayercontrols ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_VideoPlayer, {\n    controls: \"\",\n    class: \"video-player vjs-custom-skin\",\n    options: $data.playerOptions\n  }, null, 8 /* PROPS */, [\"options\"])])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["key","_ctx","$store","state","VideoPlayercontrols","_createElementBlock","_hoisted_1","_createVNode","_component_VideoPlayer","controls","class","options","$data","playerOptions","_createCommentVNode"],"sources":["E:\\备份\\桌面\\git\\v0.1.0\\restvue003\\src\\components\\VideoPlay.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"$store.state.VideoPlayercontrols\">\r\n        <VideoPlayer\r\n        controls\r\n        class=\"video-player vjs-custom-skin\" \r\n        :options=\"playerOptions\"\r\n        ></VideoPlayer>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { VideoPlayer } from 'vue-video-player'\r\nimport 'video.js/dist/video-js.css'\r\nexport default{\r\n    name:'VideoPlay',\r\n    components: {\r\n        VideoPlayer\r\n  },\r\n  data(){\r\n    return{\r\n        playerOptions:{\r\n            playbackRates: [0.5, 1.0, 1.5, 2.0], // 可选的播放速度\r\n                autoplay: true,  // 如果为true,浏览器准备好时开始回放\r\n                muted: false,     // 默认情况下将会消除任何音频。\r\n                loop: false,      // 是否视频一结束就重新开始。\r\n                preload: 'auto',  // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）\r\n                language: 'zh-CN',\r\n                aspectRatio: '16:9',  // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如\"16:9\"或\"4:3\"）\r\n                fluid: true,  // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。\r\n                sources: [{\r\n                    type: \"video/mp4\",  // 类型\r\n                    src: this.$store.state.api+'/VideoPlay?VideoPlay='+this.$store.state.DirPath+'/'+this.$store.state.OfficEword             // url地址\r\n                }],\r\n                poster: '',  // 封面地址\r\n                notSupportedMessage: '此视频暂无法播放，请稍后再试',  // 允许覆盖Video.js无法播放媒体源时显示的默认信息。\r\n                controlBar: {\r\n                    timeDivider: true,           // 当前时间和持续时间的分隔符\r\n                    durationDisplay: true,       // 显示持续时间\r\n                    remainingTimeDisplay: false, // 是否显示剩余时间功能\r\n                    fullscreenToggle: true       // 是否显示全屏按钮\r\n                }\r\n\r\n        }\r\n    }\r\n  },\r\n}\r\n</script>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;;;SACeC,IAAA,CAAAC,MAAM,CAACC,KAAK,CAACC,mBAAmB,I,cAA3CC,mBAAA,CAMM,OAPVC,UAAA,GAEQC,YAAA,CAIeC,sBAAA;IAHfC,QAAQ,EAAR,EAAQ;IACRC,KAAK,EAAC,8BAA8B;IACnCC,OAAO,EAAEC,KAAA,CAAAC;4CALlBC,mBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}