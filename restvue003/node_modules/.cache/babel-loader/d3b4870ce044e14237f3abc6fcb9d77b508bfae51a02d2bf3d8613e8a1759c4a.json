{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*! @name mpd-parser @version 0.22.1 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport { forEachMediaGroup } from '@videojs/vhs-utils/es/media-groups';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\nvar version = \"0.22.1\";\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n  return objects.reduce(function (result, source) {\n    if (typeof source !== 'object') {\n      return result;\n    }\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\nvar range = function range(start, end) {\n  var result = [];\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n};\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n  var result = [];\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n  return result;\n};\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n    return a;\n  }, []);\n};\n/**\n * Returns the first index that satisfies the matching function, or -1 if not found.\n *\n * Only necessary because of IE11 support.\n *\n * @param {Array} list - the list to search through\n * @param {Function} matchingFunction - the matching function\n *\n * @return {number} the matching index or -1 if not found\n */\n\nvar findIndex = function findIndex(list, matchingFunction) {\n  for (var i = 0; i < list.length; i++) {\n    if (matchingFunction(list[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */\n\nvar union = function union(lists, keyFunction) {\n  return values(lists.reduce(function (acc, list) {\n    list.forEach(function (el) {\n      acc[keyFunction(el)] = el;\n    });\n    return acc;\n  }, {}));\n};\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n    baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n    _ref$source = _ref.source,\n    source = _ref$source === void 0 ? '' : _ref$source,\n    _ref$range = _ref.range,\n    range = _ref$range === void 0 ? '' : _ref$range,\n    _ref$indexRange = _ref.indexRange,\n    indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\n\n    var startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\n    var endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n\n    if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\n      startRange = Number(startRange);\n    }\n    if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\n      endRange = Number(endRange);\n    }\n    var length;\n    if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\n      length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\n    } else {\n      length = endRange - startRange + 1;\n    }\n    if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\n      length = Number(length);\n    } // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n    segment.byterange = {\n      length: length,\n      offset: startRange\n    };\n  }\n  return segment;\n};\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange;\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\n  } else {\n    endRange = byterange.offset + byterange.length - 1;\n  }\n  return byterange.offset + \"-\" + endRange;\n};\n\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\nvar parseEndNumber = function parseEndNumber(endNumber) {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n  if (isNaN(endNumber)) {\n    return null;\n  }\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      sourceDuration = attributes.sourceDuration,\n      periodDuration = attributes.periodDuration;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var segmentDuration = duration / timescale;\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      duration = attributes.duration,\n      _attributes$periodSta = attributes.periodStart,\n      periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n      _attributes$timeShift = attributes.timeShiftBufferDepth,\n      timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n    // after retrieving UTC server time.\n\n    var now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n    // Convert the period start time to EPOCH.\n\n    var periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number) {\n    var duration = attributes.duration,\n      _attributes$timescale3 = attributes.timescale,\n      timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n      periodStart = attributes.periodStart,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodStart,\n      time: number * duration\n    };\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var type = attributes.type,\n    duration = attributes.duration,\n    _attributes$timescale4 = attributes.timescale,\n    timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n    periodDuration = attributes.periodDuration,\n    sourceDuration = attributes.sourceDuration;\n  var _segmentRange$type = segmentRange[type](attributes),\n    start = _segmentRange$type.start,\n    end = _segmentRange$type.end;\n  var segments = range(start, end).map(toSegments(attributes));\n  if (type === 'static') {\n    var index = segments.length - 1; // section is either a period or the full source\n\n    var sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n    _attributes$initializ = attributes.initialization,\n    initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n    sourceDuration = attributes.sourceDuration,\n    _attributes$indexRang = attributes.indexRange,\n    indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n    periodStart = attributes.periodStart,\n    presentationTime = attributes.presentationTime,\n    _attributes$number = attributes.number,\n    number = _attributes$number === void 0 ? 0 : _attributes$number,\n    duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = periodStart;\n  } // If presentation time is provided, these segments are being generated by SIDX\n  // references, and should use the time provided. For the general case of SegmentBase,\n  // there should only be one segment in the period, so its presentation time is the same\n  // as its period start.\n\n  segment.presentationTime = presentationTime || periodStart;\n  segment.number = number;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nvar addSidxSegmentsToPlaylist$1 = function addSidxSegmentsToPlaylist(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = [];\n  var type = playlist.endList ? 'static' : 'dynamic';\n  var periodStart = playlist.sidx.timeline;\n  var presentationTime = periodStart;\n  var number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex; // eslint-disable-next-line\n\n  if (typeof sidx.firstOffset === 'bigint') {\n    startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\n  } else {\n    startIndex = sidxEnd + sidx.firstOffset;\n  }\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = void 0; // eslint-disable-next-line\n\n    if (typeof startIndex === 'bigint') {\n      endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\n    } else {\n      endIndex = startIndex + size - 1;\n    }\n    var indexRange = startIndex + \"-\" + endIndex;\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      periodStart: periodStart,\n      presentationTime: presentationTime,\n      number: number,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange,\n      type: type\n    };\n    var segment = segmentsFromBase(attributes)[0];\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n    segments.push(segment);\n    if (typeof startIndex === 'bigint') {\n      startIndex += window.BigInt(size);\n    } else {\n      startIndex += size;\n    }\n    presentationTime += duration / timescale;\n    number++;\n  }\n  playlist.segments = segments;\n  return playlist;\n};\nvar SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\n\nvar TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */\n\nvar getUniqueTimelineStarts = function getUniqueTimelineStarts(timelineStarts) {\n  return union(timelineStarts, function (_ref) {\n    var timeline = _ref.timeline;\n    return timeline;\n  }).sort(function (a, b) {\n    return a.timeline > b.timeline ? 1 : -1;\n  });\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */\n\nvar findPlaylistWithName = function findPlaylistWithName(playlists, name) {\n  for (var i = 0; i < playlists.length; i++) {\n    if (playlists[i].attributes.NAME === name) {\n      return playlists[i];\n    }\n  }\n  return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */\n\nvar getMediaGroupPlaylists = function getMediaGroupPlaylists(manifest) {\n  var mediaGroupPlaylists = [];\n  forEachMediaGroup(manifest, SUPPORTED_MEDIA_TYPES, function (properties, type, group, label) {\n    mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n  });\n  return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */\n\nvar updateMediaSequenceForPlaylist = function updateMediaSequenceForPlaylist(_ref2) {\n  var playlist = _ref2.playlist,\n    mediaSequence = _ref2.mediaSequence;\n  playlist.mediaSequence = mediaSequence;\n  playlist.segments.forEach(function (segment, index) {\n    segment.number = playlist.mediaSequence + index;\n  });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */\n\nvar updateSequenceNumbers = function updateSequenceNumbers(_ref3) {\n  var oldPlaylists = _ref3.oldPlaylists,\n    newPlaylists = _ref3.newPlaylists,\n    timelineStarts = _ref3.timelineStarts;\n  newPlaylists.forEach(function (playlist) {\n    playlist.discontinuitySequence = findIndex(timelineStarts, function (_ref4) {\n      var timeline = _ref4.timeline;\n      return timeline === playlist.timeline;\n    }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n    // (see ISO_23009-1-2012 5.3.5.2).\n    //\n    // If the same Representation existed in a prior Period, it will retain the same NAME.\n\n    var oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n    if (!oldPlaylist) {\n      // Since this is a new playlist, the media sequence values can start from 0 without\n      // consequence.\n      return;\n    } // TODO better support for live SIDX\n    //\n    // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n    // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n    // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n    // not supported when the SIDX properties change on refreshes.\n    //\n    // In the future, if support needs to be added, the merging logic here can be called\n    // after SIDX references are resolved. For now, exit early to prevent exceptions being\n    // thrown due to undefined references.\n\n    if (playlist.sidx) {\n      return;\n    } // Since we don't yet support early available timelines, we don't need to support\n    // playlists with no segments.\n\n    var firstNewSegment = playlist.segments[0];\n    var oldMatchingSegmentIndex = findIndex(oldPlaylist.segments, function (oldSegment) {\n      return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n    }); // No matching segment from the old playlist means the entire playlist was refreshed.\n    // In this case the media sequence should account for this update, and the new segments\n    // should be marked as discontinuous from the prior content, since the last prior\n    // timeline was removed.\n\n    if (oldMatchingSegmentIndex === -1) {\n      updateMediaSequenceForPlaylist({\n        playlist: playlist,\n        mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n      });\n      playlist.segments[0].discontinuity = true;\n      playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n      //\n      // If the new playlist's timeline is the same as the last seen segment's timeline,\n      // then a discontinuity can be added to identify that there's potentially missing\n      // content. If there's no missing content, the discontinuity should still be rather\n      // harmless. It's possible that if segment durations are accurate enough, that the\n      // existence of a gap can be determined using the presentation times and durations,\n      // but if the segment timing info is off, it may introduce more problems than simply\n      // adding the discontinuity.\n      //\n      // If the new playlist's timeline is different from the last seen segment's timeline,\n      // then a discontinuity can be added to identify that this is the first seen segment\n      // of a new timeline. However, the logic at the start of this function that\n      // determined the disconinuity sequence by timeline index is now off by one (the\n      // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n      // we added it), so the disconinuity sequence must be decremented.\n      //\n      // A period may also have a duration of zero, so the case of no segments is handled\n      // here even though we don't yet support early available periods.\n\n      if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n        playlist.discontinuitySequence--;\n      }\n      return;\n    } // If the first segment matched with a prior segment on a discontinuity (it's matching\n    // on the first segment of a period), then the discontinuitySequence shouldn't be the\n    // timeline's matching one, but instead should be the one prior, and the first segment\n    // of the new manifest should be marked with a discontinuity.\n    //\n    // The reason for this special case is that discontinuity sequence shows how many\n    // discontinuities have fallen off of the playlist, and discontinuities are marked on\n    // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n    // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n    // sequence, and that first segment is an indicator, but can be removed before that\n    // timeline is gone.\n\n    var oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n    if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n      firstNewSegment.discontinuity = true;\n      playlist.discontinuityStarts.unshift(0);\n      playlist.discontinuitySequence--;\n    }\n    updateMediaSequenceForPlaylist({\n      playlist: playlist,\n      mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n    });\n  });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */\n\nvar positionManifestOnTimeline = function positionManifestOnTimeline(_ref5) {\n  var oldManifest = _ref5.oldManifest,\n    newManifest = _ref5.newManifest;\n  // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n  //\n  // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n  //\n  // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n  //\n  // Because of this change, and the difficulty of supporting periods with changing start\n  // times, periods with changing start times are not supported. This makes the logic much\n  // simpler, since periods with the same start time can be considerred the same period\n  // across refreshes.\n  //\n  // To give an example as to the difficulty of handling periods where the start time may\n  // change, if a single period manifest is refreshed with another manifest with a single\n  // period, and both the start and end times are increased, then the only way to determine\n  // if it's a new period or an old one that has changed is to look through the segments of\n  // each playlist and determine the presentation time bounds to find a match. In addition,\n  // if the period start changed to exceed the old period end, then there would be no\n  // match, and it would not be possible to determine whether the refreshed period is a new\n  // one or the old one.\n  var oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n  var newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n  // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n  // of properties are saved for each seen Period. Even long running live streams won't\n  // generate too many Periods, unless the stream is watched for decades. In the future,\n  // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n  // but it may not become an issue, and the additional info can be useful for debugging.\n\n  newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\n  updateSequenceNumbers({\n    oldPlaylists: oldPlaylists,\n    newPlaylists: newPlaylists,\n    timelineStarts: newManifest.timelineStarts\n  });\n  return newManifest;\n};\nvar generateSidxKey = function generateSidxKey(sidx) {\n  return sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n};\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\n    // assuming playlist IDs are the same across periods\n    // TODO: handle multiperiod where representation sets are not the same\n    // across periods\n    var name = playlist.attributes.id + (playlist.attributes.lang || '');\n    if (!acc[name]) {\n      // First Period\n      acc[name] = playlist;\n      acc[name].attributes.timelineStarts = [];\n    } else {\n      // Subsequent Periods\n      if (playlist.segments) {\n        var _acc$name$segments;\n\n        // first segment of subsequent periods signal a discontinuity\n        if (playlist.segments[0]) {\n          playlist.segments[0].discontinuity = true;\n        }\n        (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments);\n      } // bubble up contentProtection, this assumes all DRM content\n      // has the same contentProtection\n\n      if (playlist.attributes.contentProtection) {\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n      }\n    }\n    acc[name].attributes.timelineStarts.push({\n      // Although they represent the same number, it's important to have both to make it\n      // compatible with HLS potentially having a similar attribute.\n      start: playlist.attributes.periodStart,\n      timeline: playlist.attributes.periodStart\n    });\n    return acc;\n  }, {}));\n  return mergedPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\n    return playlist;\n  });\n};\nvar addSidxSegmentsToPlaylist = function addSidxSegmentsToPlaylist(playlist, sidxMapping) {\n  var sidxKey = generateSidxKey(playlist.sidx);\n  var sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n  return playlist;\n};\nvar addSidxSegmentsToPlaylists = function addSidxSegmentsToPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n  for (var i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n  }\n  return playlists;\n};\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref, isAudioOnly) {\n  var _attributes;\n  var attributes = _ref.attributes,\n    segments = _ref.segments,\n    sidx = _ref.sidx,\n    mediaSequence = _ref.mediaSequence,\n    discontinuitySequence = _ref.discontinuitySequence,\n    discontinuityStarts = _ref.discontinuityStarts;\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    discontinuitySequence: discontinuitySequence,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n  return playlist;\n};\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _m3u8Attributes;\n  var attributes = _ref2.attributes,\n    segments = _ref2.segments,\n    mediaSequence = _ref2.mediaSequence,\n    discontinuityStarts = _ref2.discontinuityStarts,\n    discontinuitySequence = _ref2.discontinuitySequence;\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodStart,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n  var m3u8Attributes = (_m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth\n  }, _m3u8Attributes['PROGRAM-ID'] = 1, _m3u8Attributes);\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n  return {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    timelineStarts: attributes.timelineStarts,\n    discontinuityStarts: discontinuityStarts,\n    discontinuitySequence: discontinuitySequence,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n};\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping, isAudioOnly) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n  if (isAudioOnly === void 0) {\n    isAudioOnly = false;\n  }\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = playlist.attributes.label || 'main';\n    if (language && !playlist.attributes.label) {\n      var roleLabel = role ? \" (\" + role + \")\" : '';\n      label = \"\" + playlist.attributes.lang + roleLabel;\n    }\n    if (!a[label]) {\n      a[label] = {\n        language: language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n    var formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n  return formattedPlaylists;\n};\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n    a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\nvar organizeCaptionServices = function organizeCaptionServices(captionServices) {\n  return captionServices.reduce(function (svcObj, svc) {\n    if (!svc) {\n      return svcObj;\n    }\n    svc.forEach(function (service) {\n      var channel = service.channel,\n        language = service.language;\n      svcObj[language] = {\n        autoselect: false,\n        default: false,\n        instreamId: channel,\n        language: language\n      };\n      if (service.hasOwnProperty('aspectRatio')) {\n        svcObj[language].aspectRatio = service.aspectRatio;\n      }\n      if (service.hasOwnProperty('easyReader')) {\n        svcObj[language].easyReader = service.easyReader;\n      }\n      if (service.hasOwnProperty('3D')) {\n        svcObj[language]['3D'] = service['3D'];\n      }\n    });\n    return svcObj;\n  }, {});\n};\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes2;\n  var attributes = _ref3.attributes,\n    segments = _ref3.segments,\n    sidx = _ref3.sidx,\n    discontinuityStarts = _ref3.discontinuityStarts;\n  var playlist = {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    segments: segments\n  };\n  if (attributes.frameRate) {\n    playlist.attributes['FRAME-RATE'] = attributes.frameRate;\n  }\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n  return playlist;\n};\nvar videoOnly = function videoOnly(_ref4) {\n  var attributes = _ref4.attributes;\n  return attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n};\nvar audioOnly = function audioOnly(_ref5) {\n  var attributes = _ref5.attributes;\n  return attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n};\nvar vttOnly = function vttOnly(_ref6) {\n  var attributes = _ref6.attributes;\n  return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n};\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */\n\n/**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */\n\nvar addMediaSequenceValues = function addMediaSequenceValues(playlists, timelineStarts) {\n  // increment all segments sequentially\n  playlists.forEach(function (playlist) {\n    playlist.mediaSequence = 0;\n    playlist.discontinuitySequence = findIndex(timelineStarts, function (_ref7) {\n      var timeline = _ref7.timeline;\n      return timeline === playlist.timeline;\n    });\n    if (!playlist.segments) {\n      return;\n    }\n    playlist.segments.forEach(function (segment, index) {\n      segment.number = index;\n    });\n  });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */\n\nvar flattenMediaGroupPlaylists = function flattenMediaGroupPlaylists(mediaGroupObject) {\n  if (!mediaGroupObject) {\n    return [];\n  }\n  return Object.keys(mediaGroupObject).reduce(function (acc, label) {\n    var labelContents = mediaGroupObject[label];\n    return acc.concat(labelContents.playlists);\n  }, []);\n};\nvar toM3u8 = function toM3u8(_ref8) {\n  var _mediaGroups;\n  var dashPlaylists = _ref8.dashPlaylists,\n    locations = _ref8.locations,\n    _ref8$sidxMapping = _ref8.sidxMapping,\n    sidxMapping = _ref8$sidxMapping === void 0 ? {} : _ref8$sidxMapping,\n    previousManifest = _ref8.previousManifest;\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n    duration = _dashPlaylists$0$attr.sourceDuration,\n    type = _dashPlaylists$0$attr.type,\n    suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\n    minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n  var captions = dashPlaylists.map(function (playlist) {\n    return playlist.attributes.captionServices;\n  }).filter(Boolean);\n  var manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n  if (locations) {\n    manifest.locations = locations;\n  }\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n  var isAudioOnly = manifest.playlists.length === 0;\n  var organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n  var organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n  var formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n  var playlistTimelineStarts = formattedPlaylists.map(function (_ref9) {\n    var timelineStarts = _ref9.timelineStarts;\n    return timelineStarts;\n  });\n  manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n  addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n  if (organizedAudioGroup) {\n    manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n  }\n  if (organizedVttGroup) {\n    manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n  }\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n  if (previousManifest) {\n    return positionManifestOnTimeline({\n      oldManifest: previousManifest,\n      newManifest: manifest\n    });\n  }\n  return manifest;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n    clientOffset = attributes.clientOffset,\n    availabilityStartTime = attributes.availabilityStartTime,\n    _attributes$timescale = attributes.timescale,\n    timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n    _attributes$periodSta = attributes.periodStart,\n    periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n    _attributes$minimumUp = attributes.minimumUpdatePeriod,\n    minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + periodStart;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var type = attributes.type,\n    _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n    minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\n    _attributes$media = attributes.media,\n    media = _attributes$media === void 0 ? '' : _attributes$media,\n    sourceDuration = attributes.sourceDuration,\n    _attributes$timescale2 = attributes.timescale,\n    timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n    _attributes$startNumb = attributes.startNumber,\n    startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\n    timeline = attributes.periodStart;\n  var segments = [];\n  var time = -1;\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n    var count = void 0;\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n  return segments;\n};\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n    var value = '' + values[identifier];\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n    if (value.length >= width) {\n      return value;\n    }\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodStart\n    }];\n  }\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ = attributes.initialization,\n    initialization = _attributes$initializ === void 0 ? {\n      sourceURL: '',\n      range: ''\n    } : _attributes$initializ;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    var presentationTime =\n    // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    var map = {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime: presentationTime\n    };\n    return map;\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n    _attributes$initializ = attributes.initialization,\n    initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n    _attributes$segmentUr = attributes.segmentUrls,\n    segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr,\n    periodStart = attributes.periodStart; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n    segmentInfo = _ref.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n  var segmentsInfo = {\n    attributes: attributes\n  };\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n  var segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n      duration = _segmentAttributes.duration,\n      _segmentAttributes$ti = _segmentAttributes.timescale,\n      timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n  return segmentsInfo;\n};\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\n/**\n * Converts the provided string that may contain a division operation to a number.\n *\n * @param {string} value - the provided string value\n *\n * @return {number} the parsed string value\n */\nvar parseDivisionValue = function parseDivisionValue(value) {\n  return parseFloat(value.split('/').reduce(function (prev, current) {\n    return prev / current;\n  }));\n};\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n  if (!match) {\n    return 0;\n  }\n  var _match$slice = match.slice(1),\n    year = _match$slice[0],\n    month = _match$slice[1],\n    day = _match$slice[2],\n    hour = _match$slice[3],\n    minute = _match$slice[4],\n    second = _match$slice[5];\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n  return Date.parse(str);\n};\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type: function type(value) {\n    return value;\n  },\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the frame rate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed frame rate\n   */\n  frameRate: function frameRate(value) {\n    return parseDivisionValue(value);\n  },\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset: function presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n    return parsedValue;\n  },\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\n\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n  var segmentInfo = {\n    template: template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, {\n          baseUrl: baseUrl\n        })\n      };\n    });\n  };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated\n    // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system\n    // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do\n    // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).\n\n    if (attributes.schemeIdUri) {\n      attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();\n    }\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        acc[keySystem].pssh = pssh && decodeB64ToUint8Array(pssh);\n      }\n    }\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\nvar parseCaptionServiceMetadata = function parseCaptionServiceMetadata(service) {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    var values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(function (value) {\n      var channel;\n      var language; // default language to value\n\n      language = value;\n      if (/^CC\\d=/.test(value)) {\n        var _value$split = value.split('=');\n        channel = _value$split[0];\n        language = _value$split[1];\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n      return {\n        channel: channel,\n        language: language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    var _values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return _values.map(function (value) {\n      var flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n      if (/=/.test(value)) {\n        var _value$split2 = value.split('='),\n          channel = _value$split2[0],\n          _value$split2$ = _value$split2[1],\n          opts = _value$split2$ === void 0 ? '' : _value$split2$;\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(function (opt) {\n          var _opt$split = opt.split(':'),\n            name = _opt$split[0],\n            val = _opt$split[1];\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n      return flags;\n    });\n  }\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n    var captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n    if (captionServices) {\n      attrs = merge(attrs, {\n        captionServices: captionServices\n      });\n    }\n    var label = findChildren(adaptationSet, 'Label')[0];\n    if (label && label.childNodes.length) {\n      var labelVal = label.childNodes[0].nodeValue.trim();\n      attrs = merge(attrs, {\n        label: labelVal\n      });\n    }\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n    var periodAttributes = merge(mpdAttributes, {\n      periodStart: period.attributes.start\n    });\n    if (typeof period.attributes.duration === 'number') {\n      periodAttributes.periodDuration = period.attributes.duration;\n    }\n    var adaptationSets = findChildren(period.node, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period.node);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\nvar getPeriodStart = function getPeriodStart(_ref) {\n  var attributes = _ref.attributes,\n    priorPeriodAttributes = _ref.priorPeriodAttributes,\n    mpdType = _ref.mpdType;\n\n  // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nvar inheritAttributes = function inheritAttributes(mpd, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$manifestUri = _options.manifestUri,\n    manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n    _options$NOW = _options.NOW,\n    NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n    _options$clientOffset = _options.clientOffset,\n    clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n  var periodNodes = findChildren(mpd, 'Period');\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n  var locations = findChildren(mpd, 'Location');\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL')); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n  var periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach(function (node, index) {\n    var attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    var priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes: attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node: node,\n      attributes: attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\n  };\n};\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n  var parser = new DOMParser();\n  var xml;\n  var mpd;\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throwsw on invalid xml\n  }\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n  if (!UTCTimingNode) {\n    return null;\n  }\n  var attributes = parseAttributes(UTCTimingNode);\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n  return attributes;\n};\nvar VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */\n\nvar parse = function parse(manifestString, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8({\n    dashPlaylists: playlists,\n    locations: parsedManifestInfo.locations,\n    sidxMapping: options.sidxMapping,\n    previousManifest: options.previousManifest\n  });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\nexport { VERSION, addSidxSegmentsToPlaylist$1 as addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };","map":{"version":3,"names":["resolveUrl","window","forEachMediaGroup","decodeB64ToUint8Array","DOMParser","version","isObject","obj","merge","_len","arguments","length","objects","Array","_key","reduce","result","source","Object","keys","forEach","key","isArray","concat","values","o","map","k","range","start","end","i","push","flatten","lists","x","y","from","list","findIndexes","l","a","e","findIndex","matchingFunction","union","keyFunction","acc","el","errors","INVALID_NUMBER_OF_PERIOD","DASH_EMPTY_MANIFEST","DASH_INVALID_XML","NO_BASE_URL","MISSING_SEGMENT_INFORMATION","SEGMENT_TIME_UNSPECIFIED","UNSUPPORTED_UTC_TIMING_SCHEME","urlTypeToSegment","_ref","_ref$baseUrl","baseUrl","_ref$source","_ref$range","_ref$indexRange","indexRange","segment","uri","resolvedUri","rangeStr","ranges","split","startRange","BigInt","parseInt","endRange","Number","MAX_SAFE_INTEGER","byterange","offset","byteRangeToString","parseEndNumber","endNumber","isNaN","segmentRange","static","_static","attributes","duration","_attributes$timescale","timescale","sourceDuration","periodDuration","segmentDuration","dynamic","NOW","clientOffset","availabilityStartTime","_attributes$timescale2","_attributes$periodSta","periodStart","_attributes$minimumUp","minimumUpdatePeriod","_attributes$timeShift","timeShiftBufferDepth","Infinity","now","periodStartWC","periodEndWC","segmentCount","Math","ceil","availableStart","floor","availableEnd","max","min","toSegments","number","_attributes$timescale3","_attributes$startNumb","startNumber","timeline","time","parseByDuration","type","_attributes$timescale4","_segmentRange$type","segments","index","sectionDuration","segmentsFromBase","_attributes$initializ","initialization","_attributes$indexRang","presentationTime","_attributes$number","Error","initSegment","sourceURL","segmentTimeInfo","addSidxSegmentsToPlaylist$1","addSidxSegmentsToPlaylist","playlist","sidx","sidxByteRange","sidxEnd","mediaReferences","references","filter","r","referenceType","endList","mediaSequence","startIndex","firstOffset","reference","size","referencedSize","subsegmentDuration","endIndex","SUPPORTED_MEDIA_TYPES","TIME_FUDGE","getUniqueTimelineStarts","timelineStarts","sort","b","findPlaylistWithName","playlists","name","NAME","getMediaGroupPlaylists","manifest","mediaGroupPlaylists","properties","group","label","updateMediaSequenceForPlaylist","_ref2","updateSequenceNumbers","_ref3","oldPlaylists","newPlaylists","discontinuitySequence","_ref4","oldPlaylist","firstNewSegment","oldMatchingSegmentIndex","oldSegment","abs","discontinuity","discontinuityStarts","unshift","oldMatchingSegment","positionManifestOnTimeline","_ref5","oldManifest","newManifest","generateSidxKey","mergeDiscontiguousPlaylists","mergedPlaylists","id","lang","_acc$name$segments","apply","contentProtection","sidxMapping","sidxKey","sidxMatch","addSidxSegmentsToPlaylists","formatAudioPlaylist","isAudioOnly","_attributes","BANDWIDTH","bandwidth","CODECS","codecs","targetDuration","AUDIO","SUBTITLES","formatVttPlaylist","_m3u8Attributes","m3u8Attributes","organizeAudioPlaylists","mainPlaylist","formattedPlaylists","role","value","language","roleLabel","autoselect","default","formatted","firstLabel","organizeVttPlaylists","organizeCaptionServices","captionServices","svcObj","svc","service","channel","instreamId","hasOwnProperty","aspectRatio","easyReader","formatVideoPlaylist","_attributes2","RESOLUTION","width","height","frameRate","videoOnly","mimeType","contentType","audioOnly","vttOnly","_ref6","addMediaSequenceValues","_ref7","flattenMediaGroupPlaylists","mediaGroupObject","labelContents","toM3u8","_ref8","_mediaGroups","dashPlaylists","locations","_ref8$sidxMapping","previousManifest","_dashPlaylists$0$attr","suggestedPresentationDelay","videoPlaylists","audioPlaylists","vttPlaylists","captions","Boolean","allowCache","mediaGroups","VIDEO","organizedAudioGroup","organizedVttGroup","playlistTimelineStarts","_ref9","audio","subs","cc","getLiveRValue","parseByTimeline","segmentTimeline","_attributes$minimumUp2","_attributes$media","media","sIndex","S","d","repeat","segmentTime","t","count","nextS","indexOf","identifierPattern","identifierReplacement","match","identifier","format","join","constructTemplateUrl","url","replace","parseTemplateInfo","segmentsFromTemplate","templateValues","RepresentationID","Bandwidth","mapSegment","Time","presentationTimeOffset","SegmentURLToSegmentObject","segmentUrl","mediaRange","segmentsFromList","_attributes$segmentUr","segmentUrls","segmentUrlMap","segmentUrlObject","generateSegments","segmentInfo","segmentAttributes","segmentsFn","template","base","segmentsInfo","_segmentAttributes","_segmentAttributes$ti","toPlaylists","representations","findChildren","element","childNodes","tagName","getContent","textContent","trim","parseDivisionValue","parseFloat","prev","current","parseDuration","str","SECONDS_IN_YEAR","SECONDS_IN_MONTH","SECONDS_IN_DAY","SECONDS_IN_HOUR","SECONDS_IN_MIN","durationRegex","exec","_match$slice","slice","year","month","day","hour","minute","second","parseDate","dateRegex","test","Date","parse","parsers","mediaPresentationDuration","parsedValue","DEFAULT","parseAttributes","parseFn","keySystemsMap","buildBaseUrls","referenceUrls","baseUrlElements","baseUrlElement","getSegmentInformation","adaptationSet","segmentTemplate","segmentList","s","tag","segmentBase","segmentTimelineParentNode","segmentInitializationParentNode","segmentInitialization","inheritBaseUrls","adaptationSetAttributes","adaptationSetBaseUrls","adaptationSetSegmentInfo","representation","repBaseUrlElements","repBaseUrls","representationSegmentInfo","generateKeySystemInformation","contentProtectionNodes","node","schemeIdUri","toLowerCase","keySystem","psshNode","pssh","parseCaptionServiceMetadata","_value$split","_values","flags","undefined","_value$split2","_value$split2$","opts","opt","_opt$split","val","toRepresentations","periodAttributes","periodBaseUrls","periodSegmentInfo","roleAttributes","attrs","accessibility","labelVal","nodeValue","toAdaptationSets","mpdAttributes","mpdBaseUrls","period","adaptationSets","getPeriodStart","priorPeriodAttributes","mpdType","inheritAttributes","mpd","options","_options","_options$manifestUri","manifestUri","_options$NOW","_options$clientOffset","periodNodes","periods","priorPeriod","representationInfo","stringToMpdXml","manifestString","parser","xml","parseFromString","documentElement","getElementsByTagName","parseUTCTimingScheme","UTCTimingNode","method","VERSION","parsedManifestInfo","parseUTCTiming"],"sources":["C:/Users/Administered/Desktop/restvue003/node_modules/mpd-parser/dist/mpd-parser.es.js"],"sourcesContent":["/*! @name mpd-parser @version 0.22.1 @license Apache-2.0 */\nimport resolveUrl from '@videojs/vhs-utils/es/resolve-url';\nimport window from 'global/window';\nimport { forEachMediaGroup } from '@videojs/vhs-utils/es/media-groups';\nimport decodeB64ToUint8Array from '@videojs/vhs-utils/es/decode-b64-to-uint8-array';\nimport { DOMParser } from '@xmldom/xmldom';\n\nvar version = \"0.22.1\";\n\nvar isObject = function isObject(obj) {\n  return !!obj && typeof obj === 'object';\n};\n\nvar merge = function merge() {\n  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n    objects[_key] = arguments[_key];\n  }\n\n  return objects.reduce(function (result, source) {\n    if (typeof source !== 'object') {\n      return result;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      if (Array.isArray(result[key]) && Array.isArray(source[key])) {\n        result[key] = result[key].concat(source[key]);\n      } else if (isObject(result[key]) && isObject(source[key])) {\n        result[key] = merge(result[key], source[key]);\n      } else {\n        result[key] = source[key];\n      }\n    });\n    return result;\n  }, {});\n};\nvar values = function values(o) {\n  return Object.keys(o).map(function (k) {\n    return o[k];\n  });\n};\n\nvar range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i < end; i++) {\n    result.push(i);\n  }\n\n  return result;\n};\nvar flatten = function flatten(lists) {\n  return lists.reduce(function (x, y) {\n    return x.concat(y);\n  }, []);\n};\nvar from = function from(list) {\n  if (!list.length) {\n    return [];\n  }\n\n  var result = [];\n\n  for (var i = 0; i < list.length; i++) {\n    result.push(list[i]);\n  }\n\n  return result;\n};\nvar findIndexes = function findIndexes(l, key) {\n  return l.reduce(function (a, e, i) {\n    if (e[key]) {\n      a.push(i);\n    }\n\n    return a;\n  }, []);\n};\n/**\n * Returns the first index that satisfies the matching function, or -1 if not found.\n *\n * Only necessary because of IE11 support.\n *\n * @param {Array} list - the list to search through\n * @param {Function} matchingFunction - the matching function\n *\n * @return {number} the matching index or -1 if not found\n */\n\nvar findIndex = function findIndex(list, matchingFunction) {\n  for (var i = 0; i < list.length; i++) {\n    if (matchingFunction(list[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n/**\n * Returns a union of the included lists provided each element can be identified by a key.\n *\n * @param {Array} list - list of lists to get the union of\n * @param {Function} keyFunction - the function to use as a key for each element\n *\n * @return {Array} the union of the arrays\n */\n\nvar union = function union(lists, keyFunction) {\n  return values(lists.reduce(function (acc, list) {\n    list.forEach(function (el) {\n      acc[keyFunction(el)] = el;\n    });\n    return acc;\n  }, {}));\n};\n\nvar errors = {\n  INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',\n  DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',\n  DASH_INVALID_XML: 'DASH_INVALID_XML',\n  NO_BASE_URL: 'NO_BASE_URL',\n  MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',\n  SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',\n  UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'\n};\n\n/**\n * @typedef {Object} SingleUri\n * @property {string} uri - relative location of segment\n * @property {string} resolvedUri - resolved location of segment\n * @property {Object} byterange - Object containing information on how to make byte range\n *   requests following byte-range-spec per RFC2616.\n * @property {String} byterange.length - length of range request\n * @property {String} byterange.offset - byte offset of range request\n *\n * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1\n */\n\n/**\n * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object\n * that conforms to how m3u8-parser is structured\n *\n * @see https://github.com/videojs/m3u8-parser\n *\n * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes\n * @param {string} source - source url for segment\n * @param {string} range - optional range used for range calls,\n *   follows  RFC 2616, Clause 14.35.1\n * @return {SingleUri} full segment information transformed into a format similar\n *   to m3u8-parser\n */\n\nvar urlTypeToSegment = function urlTypeToSegment(_ref) {\n  var _ref$baseUrl = _ref.baseUrl,\n      baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,\n      _ref$source = _ref.source,\n      source = _ref$source === void 0 ? '' : _ref$source,\n      _ref$range = _ref.range,\n      range = _ref$range === void 0 ? '' : _ref$range,\n      _ref$indexRange = _ref.indexRange,\n      indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;\n  var segment = {\n    uri: source,\n    resolvedUri: resolveUrl(baseUrl || '', source)\n  };\n\n  if (range || indexRange) {\n    var rangeStr = range ? range : indexRange;\n    var ranges = rangeStr.split('-'); // default to parsing this as a BigInt if possible\n\n    var startRange = window.BigInt ? window.BigInt(ranges[0]) : parseInt(ranges[0], 10);\n    var endRange = window.BigInt ? window.BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER\n\n    if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === 'bigint') {\n      startRange = Number(startRange);\n    }\n\n    if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === 'bigint') {\n      endRange = Number(endRange);\n    }\n\n    var length;\n\n    if (typeof endRange === 'bigint' || typeof startRange === 'bigint') {\n      length = window.BigInt(endRange) - window.BigInt(startRange) + window.BigInt(1);\n    } else {\n      length = endRange - startRange + 1;\n    }\n\n    if (typeof length === 'bigint' && length < Number.MAX_SAFE_INTEGER) {\n      length = Number(length);\n    } // byterange should be inclusive according to\n    // RFC 2616, Clause 14.35.1\n\n\n    segment.byterange = {\n      length: length,\n      offset: startRange\n    };\n  }\n\n  return segment;\n};\nvar byteRangeToString = function byteRangeToString(byterange) {\n  // `endRange` is one less than `offset + length` because the HTTP range\n  // header uses inclusive ranges\n  var endRange;\n\n  if (typeof byterange.offset === 'bigint' || typeof byterange.length === 'bigint') {\n    endRange = window.BigInt(byterange.offset) + window.BigInt(byterange.length) - window.BigInt(1);\n  } else {\n    endRange = byterange.offset + byterange.length - 1;\n  }\n\n  return byterange.offset + \"-\" + endRange;\n};\n\n/**\n * parse the end number attribue that can be a string\n * number, or undefined.\n *\n * @param {string|number|undefined} endNumber\n *        The end number attribute.\n *\n * @return {number|null}\n *          The result of parsing the end number.\n */\n\nvar parseEndNumber = function parseEndNumber(endNumber) {\n  if (endNumber && typeof endNumber !== 'number') {\n    endNumber = parseInt(endNumber, 10);\n  }\n\n  if (isNaN(endNumber)) {\n    return null;\n  }\n\n  return endNumber;\n};\n/**\n * Functions for calculating the range of available segments in static and dynamic\n * manifests.\n */\n\n\nvar segmentRange = {\n  /**\n   * Returns the entire range of available segments for a static MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  static: function _static(attributes) {\n    var duration = attributes.duration,\n        _attributes$timescale = attributes.timescale,\n        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n        sourceDuration = attributes.sourceDuration,\n        periodDuration = attributes.periodDuration;\n    var endNumber = parseEndNumber(attributes.endNumber);\n    var segmentDuration = duration / timescale;\n\n    if (typeof endNumber === 'number') {\n      return {\n        start: 0,\n        end: endNumber\n      };\n    }\n\n    if (typeof periodDuration === 'number') {\n      return {\n        start: 0,\n        end: periodDuration / segmentDuration\n      };\n    }\n\n    return {\n      start: 0,\n      end: sourceDuration / segmentDuration\n    };\n  },\n\n  /**\n   * Returns the current live window range of available segments for a dynamic MPD\n   *\n   * @param {Object} attributes\n   *        Inheritied MPD attributes\n   * @return {{ start: number, end: number }}\n   *         The start and end numbers for available segments\n   */\n  dynamic: function dynamic(attributes) {\n    var NOW = attributes.NOW,\n        clientOffset = attributes.clientOffset,\n        availabilityStartTime = attributes.availabilityStartTime,\n        _attributes$timescale2 = attributes.timescale,\n        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n        duration = attributes.duration,\n        _attributes$periodSta = attributes.periodStart,\n        periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n        _attributes$minimumUp = attributes.minimumUpdatePeriod,\n        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,\n        _attributes$timeShift = attributes.timeShiftBufferDepth,\n        timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;\n    var endNumber = parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated\n    // after retrieving UTC server time.\n\n    var now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.\n    // Convert the period start time to EPOCH.\n\n    var periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.\n\n    var periodEndWC = now + minimumUpdatePeriod;\n    var periodDuration = periodEndWC - periodStartWC;\n    var segmentCount = Math.ceil(periodDuration * timescale / duration);\n    var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);\n    var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);\n    return {\n      start: Math.max(0, availableStart),\n      end: typeof endNumber === 'number' ? endNumber : Math.min(segmentCount, availableEnd)\n    };\n  }\n};\n/**\n * Maps a range of numbers to objects with information needed to build the corresponding\n * segment list\n *\n * @name toSegmentsCallback\n * @function\n * @param {number} number\n *        Number of the segment\n * @param {number} index\n *        Index of the number in the range list\n * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}\n *         Object with segment timing and duration info\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping a range of numbers to\n * information needed to build the segment list.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {toSegmentsCallback}\n *         Callback map function\n */\n\nvar toSegments = function toSegments(attributes) {\n  return function (number) {\n    var duration = attributes.duration,\n        _attributes$timescale3 = attributes.timescale,\n        timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,\n        periodStart = attributes.periodStart,\n        _attributes$startNumb = attributes.startNumber,\n        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;\n    return {\n      number: startNumber + number,\n      duration: duration / timescale,\n      timeline: periodStart,\n      time: number * duration\n    };\n  };\n};\n/**\n * Returns a list of objects containing segment timing and duration info used for\n * building the list of segments. This uses the @duration attribute specified\n * in the MPD manifest to derive the range of segments.\n *\n * @param {Object} attributes\n *        Inherited MPD attributes\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseByDuration = function parseByDuration(attributes) {\n  var type = attributes.type,\n      duration = attributes.duration,\n      _attributes$timescale4 = attributes.timescale,\n      timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,\n      periodDuration = attributes.periodDuration,\n      sourceDuration = attributes.sourceDuration;\n\n  var _segmentRange$type = segmentRange[type](attributes),\n      start = _segmentRange$type.start,\n      end = _segmentRange$type.end;\n\n  var segments = range(start, end).map(toSegments(attributes));\n\n  if (type === 'static') {\n    var index = segments.length - 1; // section is either a period or the full source\n\n    var sectionDuration = typeof periodDuration === 'number' ? periodDuration : sourceDuration; // final segment may be less than full segment duration\n\n    segments[index].duration = sectionDuration - duration / timescale * index;\n  }\n\n  return segments;\n};\n\n/**\n * Translates SegmentBase into a set of segments.\n * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @return {Object.<Array>} list of segments\n */\n\nvar segmentsFromBase = function segmentsFromBase(attributes) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$indexRang = attributes.indexRange,\n      indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,\n      periodStart = attributes.periodStart,\n      presentationTime = attributes.presentationTime,\n      _attributes$number = attributes.number,\n      number = _attributes$number === void 0 ? 0 : _attributes$number,\n      duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)\n\n  if (!baseUrl) {\n    throw new Error(errors.NO_BASE_URL);\n  }\n\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: baseUrl,\n    indexRange: indexRange\n  });\n  segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source\n  // (since SegmentBase is only for one total segment)\n\n  if (duration) {\n    var segmentTimeInfo = parseByDuration(attributes);\n\n    if (segmentTimeInfo.length) {\n      segment.duration = segmentTimeInfo[0].duration;\n      segment.timeline = segmentTimeInfo[0].timeline;\n    }\n  } else if (sourceDuration) {\n    segment.duration = sourceDuration;\n    segment.timeline = periodStart;\n  } // If presentation time is provided, these segments are being generated by SIDX\n  // references, and should use the time provided. For the general case of SegmentBase,\n  // there should only be one segment in the period, so its presentation time is the same\n  // as its period start.\n\n\n  segment.presentationTime = presentationTime || periodStart;\n  segment.number = number;\n  return [segment];\n};\n/**\n * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist\n * according to the sidx information given.\n *\n * playlist.sidx has metadadata about the sidx where-as the sidx param\n * is the parsed sidx box itself.\n *\n * @param {Object} playlist the playlist to update the sidx information for\n * @param {Object} sidx the parsed sidx box\n * @return {Object} the playlist object with the updated sidx information\n */\n\nvar addSidxSegmentsToPlaylist$1 = function addSidxSegmentsToPlaylist(playlist, sidx, baseUrl) {\n  // Retain init segment information\n  var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing\n\n  var sourceDuration = playlist.sidx.duration; // Retain source timeline\n\n  var timeline = playlist.timeline || 0;\n  var sidxByteRange = playlist.sidx.byterange;\n  var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx\n\n  var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes\n\n  var mediaReferences = sidx.references.filter(function (r) {\n    return r.referenceType !== 1;\n  });\n  var segments = [];\n  var type = playlist.endList ? 'static' : 'dynamic';\n  var periodStart = playlist.sidx.timeline;\n  var presentationTime = periodStart;\n  var number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box\n\n  var startIndex; // eslint-disable-next-line\n\n  if (typeof sidx.firstOffset === 'bigint') {\n    startIndex = window.BigInt(sidxEnd) + sidx.firstOffset;\n  } else {\n    startIndex = sidxEnd + sidx.firstOffset;\n  }\n\n  for (var i = 0; i < mediaReferences.length; i++) {\n    var reference = sidx.references[i]; // size of the referenced (sub)segment\n\n    var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale\n    // this will be converted to seconds when generating segments\n\n    var duration = reference.subsegmentDuration; // should be an inclusive range\n\n    var endIndex = void 0; // eslint-disable-next-line\n\n    if (typeof startIndex === 'bigint') {\n      endIndex = startIndex + window.BigInt(size) - window.BigInt(1);\n    } else {\n      endIndex = startIndex + size - 1;\n    }\n\n    var indexRange = startIndex + \"-\" + endIndex;\n    var attributes = {\n      baseUrl: baseUrl,\n      timescale: timescale,\n      timeline: timeline,\n      periodStart: periodStart,\n      presentationTime: presentationTime,\n      number: number,\n      duration: duration,\n      sourceDuration: sourceDuration,\n      indexRange: indexRange,\n      type: type\n    };\n    var segment = segmentsFromBase(attributes)[0];\n\n    if (initSegment) {\n      segment.map = initSegment;\n    }\n\n    segments.push(segment);\n\n    if (typeof startIndex === 'bigint') {\n      startIndex += window.BigInt(size);\n    } else {\n      startIndex += size;\n    }\n\n    presentationTime += duration / timescale;\n    number++;\n  }\n\n  playlist.segments = segments;\n  return playlist;\n};\n\nvar SUPPORTED_MEDIA_TYPES = ['AUDIO', 'SUBTITLES']; // allow one 60fps frame as leniency (arbitrarily chosen)\n\nvar TIME_FUDGE = 1 / 60;\n/**\n * Given a list of timelineStarts, combines, dedupes, and sorts them.\n *\n * @param {TimelineStart[]} timelineStarts - list of timeline starts\n *\n * @return {TimelineStart[]} the combined and deduped timeline starts\n */\n\nvar getUniqueTimelineStarts = function getUniqueTimelineStarts(timelineStarts) {\n  return union(timelineStarts, function (_ref) {\n    var timeline = _ref.timeline;\n    return timeline;\n  }).sort(function (a, b) {\n    return a.timeline > b.timeline ? 1 : -1;\n  });\n};\n/**\n * Finds the playlist with the matching NAME attribute.\n *\n * @param {Array} playlists - playlists to search through\n * @param {string} name - the NAME attribute to search for\n *\n * @return {Object|null} the matching playlist object, or null\n */\n\nvar findPlaylistWithName = function findPlaylistWithName(playlists, name) {\n  for (var i = 0; i < playlists.length; i++) {\n    if (playlists[i].attributes.NAME === name) {\n      return playlists[i];\n    }\n  }\n\n  return null;\n};\n/**\n * Gets a flattened array of media group playlists.\n *\n * @param {Object} manifest - the main manifest object\n *\n * @return {Array} the media group playlists\n */\n\nvar getMediaGroupPlaylists = function getMediaGroupPlaylists(manifest) {\n  var mediaGroupPlaylists = [];\n  forEachMediaGroup(manifest, SUPPORTED_MEDIA_TYPES, function (properties, type, group, label) {\n    mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);\n  });\n  return mediaGroupPlaylists;\n};\n/**\n * Updates the playlist's media sequence numbers.\n *\n * @param {Object} config - options object\n * @param {Object} config.playlist - the playlist to update\n * @param {number} config.mediaSequence - the mediaSequence number to start with\n */\n\nvar updateMediaSequenceForPlaylist = function updateMediaSequenceForPlaylist(_ref2) {\n  var playlist = _ref2.playlist,\n      mediaSequence = _ref2.mediaSequence;\n  playlist.mediaSequence = mediaSequence;\n  playlist.segments.forEach(function (segment, index) {\n    segment.number = playlist.mediaSequence + index;\n  });\n};\n/**\n * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists\n * and a complete list of timeline starts.\n *\n * If no matching playlist is found, only the discontinuity sequence number of the playlist\n * will be updated.\n *\n * Since early available timelines are not supported, at least one segment must be present.\n *\n * @param {Object} config - options object\n * @param {Object[]} oldPlaylists - the old playlists to use as a reference\n * @param {Object[]} newPlaylists - the new playlists to update\n * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point\n */\n\nvar updateSequenceNumbers = function updateSequenceNumbers(_ref3) {\n  var oldPlaylists = _ref3.oldPlaylists,\n      newPlaylists = _ref3.newPlaylists,\n      timelineStarts = _ref3.timelineStarts;\n  newPlaylists.forEach(function (playlist) {\n    playlist.discontinuitySequence = findIndex(timelineStarts, function (_ref4) {\n      var timeline = _ref4.timeline;\n      return timeline === playlist.timeline;\n    }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory\n    // (see ISO_23009-1-2012 5.3.5.2).\n    //\n    // If the same Representation existed in a prior Period, it will retain the same NAME.\n\n    var oldPlaylist = findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);\n\n    if (!oldPlaylist) {\n      // Since this is a new playlist, the media sequence values can start from 0 without\n      // consequence.\n      return;\n    } // TODO better support for live SIDX\n    //\n    // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).\n    // This is evident by a playlist only having a single SIDX reference. In a multiperiod\n    // playlist there would need to be multiple SIDX references. In addition, live SIDX is\n    // not supported when the SIDX properties change on refreshes.\n    //\n    // In the future, if support needs to be added, the merging logic here can be called\n    // after SIDX references are resolved. For now, exit early to prevent exceptions being\n    // thrown due to undefined references.\n\n\n    if (playlist.sidx) {\n      return;\n    } // Since we don't yet support early available timelines, we don't need to support\n    // playlists with no segments.\n\n\n    var firstNewSegment = playlist.segments[0];\n    var oldMatchingSegmentIndex = findIndex(oldPlaylist.segments, function (oldSegment) {\n      return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < TIME_FUDGE;\n    }); // No matching segment from the old playlist means the entire playlist was refreshed.\n    // In this case the media sequence should account for this update, and the new segments\n    // should be marked as discontinuous from the prior content, since the last prior\n    // timeline was removed.\n\n    if (oldMatchingSegmentIndex === -1) {\n      updateMediaSequenceForPlaylist({\n        playlist: playlist,\n        mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length\n      });\n      playlist.segments[0].discontinuity = true;\n      playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.\n      //\n      // If the new playlist's timeline is the same as the last seen segment's timeline,\n      // then a discontinuity can be added to identify that there's potentially missing\n      // content. If there's no missing content, the discontinuity should still be rather\n      // harmless. It's possible that if segment durations are accurate enough, that the\n      // existence of a gap can be determined using the presentation times and durations,\n      // but if the segment timing info is off, it may introduce more problems than simply\n      // adding the discontinuity.\n      //\n      // If the new playlist's timeline is different from the last seen segment's timeline,\n      // then a discontinuity can be added to identify that this is the first seen segment\n      // of a new timeline. However, the logic at the start of this function that\n      // determined the disconinuity sequence by timeline index is now off by one (the\n      // discontinuity of the newest timeline hasn't yet fallen off the manifest...since\n      // we added it), so the disconinuity sequence must be decremented.\n      //\n      // A period may also have a duration of zero, so the case of no segments is handled\n      // here even though we don't yet support early available periods.\n\n      if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) {\n        playlist.discontinuitySequence--;\n      }\n\n      return;\n    } // If the first segment matched with a prior segment on a discontinuity (it's matching\n    // on the first segment of a period), then the discontinuitySequence shouldn't be the\n    // timeline's matching one, but instead should be the one prior, and the first segment\n    // of the new manifest should be marked with a discontinuity.\n    //\n    // The reason for this special case is that discontinuity sequence shows how many\n    // discontinuities have fallen off of the playlist, and discontinuities are marked on\n    // the first segment of a new \"timeline.\" Because of this, while DASH will retain that\n    // Period while the \"timeline\" exists, HLS keeps track of it via the discontinuity\n    // sequence, and that first segment is an indicator, but can be removed before that\n    // timeline is gone.\n\n\n    var oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];\n\n    if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {\n      firstNewSegment.discontinuity = true;\n      playlist.discontinuityStarts.unshift(0);\n      playlist.discontinuitySequence--;\n    }\n\n    updateMediaSequenceForPlaylist({\n      playlist: playlist,\n      mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number\n    });\n  });\n};\n/**\n * Given an old parsed manifest object and a new parsed manifest object, updates the\n * sequence and timing values within the new manifest to ensure that it lines up with the\n * old.\n *\n * @param {Array} oldManifest - the old main manifest object\n * @param {Array} newManifest - the new main manifest object\n *\n * @return {Object} the updated new manifest object\n */\n\nvar positionManifestOnTimeline = function positionManifestOnTimeline(_ref5) {\n  var oldManifest = _ref5.oldManifest,\n      newManifest = _ref5.newManifest;\n  // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:\n  //\n  // \"MPD@availabilityStartTime and Period@start shall not be changed over MPD updates.\"\n  //\n  // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160\n  //\n  // Because of this change, and the difficulty of supporting periods with changing start\n  // times, periods with changing start times are not supported. This makes the logic much\n  // simpler, since periods with the same start time can be considerred the same period\n  // across refreshes.\n  //\n  // To give an example as to the difficulty of handling periods where the start time may\n  // change, if a single period manifest is refreshed with another manifest with a single\n  // period, and both the start and end times are increased, then the only way to determine\n  // if it's a new period or an old one that has changed is to look through the segments of\n  // each playlist and determine the presentation time bounds to find a match. In addition,\n  // if the period start changed to exceed the old period end, then there would be no\n  // match, and it would not be possible to determine whether the refreshed period is a new\n  // one or the old one.\n  var oldPlaylists = oldManifest.playlists.concat(getMediaGroupPlaylists(oldManifest));\n  var newPlaylists = newManifest.playlists.concat(getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that\n  // there's a \"memory leak\" in that it will never stop growing, in reality, only a couple\n  // of properties are saved for each seen Period. Even long running live streams won't\n  // generate too many Periods, unless the stream is watched for decades. In the future,\n  // this can be optimized by mapping to discontinuity sequence numbers for each timeline,\n  // but it may not become an issue, and the additional info can be useful for debugging.\n\n  newManifest.timelineStarts = getUniqueTimelineStarts([oldManifest.timelineStarts, newManifest.timelineStarts]);\n  updateSequenceNumbers({\n    oldPlaylists: oldPlaylists,\n    newPlaylists: newPlaylists,\n    timelineStarts: newManifest.timelineStarts\n  });\n  return newManifest;\n};\n\nvar generateSidxKey = function generateSidxKey(sidx) {\n  return sidx && sidx.uri + '-' + byteRangeToString(sidx.byterange);\n};\n\nvar mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {\n  var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {\n    // assuming playlist IDs are the same across periods\n    // TODO: handle multiperiod where representation sets are not the same\n    // across periods\n    var name = playlist.attributes.id + (playlist.attributes.lang || '');\n\n    if (!acc[name]) {\n      // First Period\n      acc[name] = playlist;\n      acc[name].attributes.timelineStarts = [];\n    } else {\n      // Subsequent Periods\n      if (playlist.segments) {\n        var _acc$name$segments;\n\n        // first segment of subsequent periods signal a discontinuity\n        if (playlist.segments[0]) {\n          playlist.segments[0].discontinuity = true;\n        }\n\n        (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments);\n      } // bubble up contentProtection, this assumes all DRM content\n      // has the same contentProtection\n\n\n      if (playlist.attributes.contentProtection) {\n        acc[name].attributes.contentProtection = playlist.attributes.contentProtection;\n      }\n    }\n\n    acc[name].attributes.timelineStarts.push({\n      // Although they represent the same number, it's important to have both to make it\n      // compatible with HLS potentially having a similar attribute.\n      start: playlist.attributes.periodStart,\n      timeline: playlist.attributes.periodStart\n    });\n    return acc;\n  }, {}));\n  return mergedPlaylists.map(function (playlist) {\n    playlist.discontinuityStarts = findIndexes(playlist.segments || [], 'discontinuity');\n    return playlist;\n  });\n};\n\nvar addSidxSegmentsToPlaylist = function addSidxSegmentsToPlaylist(playlist, sidxMapping) {\n  var sidxKey = generateSidxKey(playlist.sidx);\n  var sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;\n\n  if (sidxMatch) {\n    addSidxSegmentsToPlaylist$1(playlist, sidxMatch, playlist.sidx.resolvedUri);\n  }\n\n  return playlist;\n};\nvar addSidxSegmentsToPlaylists = function addSidxSegmentsToPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (!Object.keys(sidxMapping).length) {\n    return playlists;\n  }\n\n  for (var i in playlists) {\n    playlists[i] = addSidxSegmentsToPlaylist(playlists[i], sidxMapping);\n  }\n\n  return playlists;\n};\nvar formatAudioPlaylist = function formatAudioPlaylist(_ref, isAudioOnly) {\n  var _attributes;\n\n  var attributes = _ref.attributes,\n      segments = _ref.segments,\n      sidx = _ref.sidx,\n      mediaSequence = _ref.mediaSequence,\n      discontinuitySequence = _ref.discontinuitySequence,\n      discontinuityStarts = _ref.discontinuityStarts;\n  var playlist = {\n    attributes: (_attributes = {\n      NAME: attributes.id,\n      BANDWIDTH: attributes.bandwidth,\n      CODECS: attributes.codecs\n    }, _attributes['PROGRAM-ID'] = 1, _attributes),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    discontinuitySequence: discontinuitySequence,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  if (isAudioOnly) {\n    playlist.attributes.AUDIO = 'audio';\n    playlist.attributes.SUBTITLES = 'subs';\n  }\n\n  return playlist;\n};\nvar formatVttPlaylist = function formatVttPlaylist(_ref2) {\n  var _m3u8Attributes;\n\n  var attributes = _ref2.attributes,\n      segments = _ref2.segments,\n      mediaSequence = _ref2.mediaSequence,\n      discontinuityStarts = _ref2.discontinuityStarts,\n      discontinuitySequence = _ref2.discontinuitySequence;\n\n  if (typeof segments === 'undefined') {\n    // vtt tracks may use single file in BaseURL\n    segments = [{\n      uri: attributes.baseUrl,\n      timeline: attributes.periodStart,\n      resolvedUri: attributes.baseUrl || '',\n      duration: attributes.sourceDuration,\n      number: 0\n    }]; // targetDuration should be the same duration as the only segment\n\n    attributes.duration = attributes.sourceDuration;\n  }\n\n  var m3u8Attributes = (_m3u8Attributes = {\n    NAME: attributes.id,\n    BANDWIDTH: attributes.bandwidth\n  }, _m3u8Attributes['PROGRAM-ID'] = 1, _m3u8Attributes);\n\n  if (attributes.codecs) {\n    m3u8Attributes.CODECS = attributes.codecs;\n  }\n\n  return {\n    attributes: m3u8Attributes,\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: attributes.baseUrl || '',\n    targetDuration: attributes.duration,\n    timelineStarts: attributes.timelineStarts,\n    discontinuityStarts: discontinuityStarts,\n    discontinuitySequence: discontinuitySequence,\n    mediaSequence: mediaSequence,\n    segments: segments\n  };\n};\nvar organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping, isAudioOnly) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  if (isAudioOnly === void 0) {\n    isAudioOnly = false;\n  }\n\n  var mainPlaylist;\n  var formattedPlaylists = playlists.reduce(function (a, playlist) {\n    var role = playlist.attributes.role && playlist.attributes.role.value || '';\n    var language = playlist.attributes.lang || '';\n    var label = playlist.attributes.label || 'main';\n\n    if (language && !playlist.attributes.label) {\n      var roleLabel = role ? \" (\" + role + \")\" : '';\n      label = \"\" + playlist.attributes.lang + roleLabel;\n    }\n\n    if (!a[label]) {\n      a[label] = {\n        language: language,\n        autoselect: true,\n        default: role === 'main',\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    var formatted = addSidxSegmentsToPlaylist(formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);\n    a[label].playlists.push(formatted);\n\n    if (typeof mainPlaylist === 'undefined' && role === 'main') {\n      mainPlaylist = playlist;\n      mainPlaylist.default = true;\n    }\n\n    return a;\n  }, {}); // if no playlists have role \"main\", mark the first as main\n\n  if (!mainPlaylist) {\n    var firstLabel = Object.keys(formattedPlaylists)[0];\n    formattedPlaylists[firstLabel].default = true;\n  }\n\n  return formattedPlaylists;\n};\nvar organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {\n  if (sidxMapping === void 0) {\n    sidxMapping = {};\n  }\n\n  return playlists.reduce(function (a, playlist) {\n    var label = playlist.attributes.lang || 'text';\n\n    if (!a[label]) {\n      a[label] = {\n        language: label,\n        default: false,\n        autoselect: false,\n        playlists: [],\n        uri: ''\n      };\n    }\n\n    a[label].playlists.push(addSidxSegmentsToPlaylist(formatVttPlaylist(playlist), sidxMapping));\n    return a;\n  }, {});\n};\n\nvar organizeCaptionServices = function organizeCaptionServices(captionServices) {\n  return captionServices.reduce(function (svcObj, svc) {\n    if (!svc) {\n      return svcObj;\n    }\n\n    svc.forEach(function (service) {\n      var channel = service.channel,\n          language = service.language;\n      svcObj[language] = {\n        autoselect: false,\n        default: false,\n        instreamId: channel,\n        language: language\n      };\n\n      if (service.hasOwnProperty('aspectRatio')) {\n        svcObj[language].aspectRatio = service.aspectRatio;\n      }\n\n      if (service.hasOwnProperty('easyReader')) {\n        svcObj[language].easyReader = service.easyReader;\n      }\n\n      if (service.hasOwnProperty('3D')) {\n        svcObj[language]['3D'] = service['3D'];\n      }\n    });\n    return svcObj;\n  }, {});\n};\n\nvar formatVideoPlaylist = function formatVideoPlaylist(_ref3) {\n  var _attributes2;\n\n  var attributes = _ref3.attributes,\n      segments = _ref3.segments,\n      sidx = _ref3.sidx,\n      discontinuityStarts = _ref3.discontinuityStarts;\n  var playlist = {\n    attributes: (_attributes2 = {\n      NAME: attributes.id,\n      AUDIO: 'audio',\n      SUBTITLES: 'subs',\n      RESOLUTION: {\n        width: attributes.width,\n        height: attributes.height\n      },\n      CODECS: attributes.codecs,\n      BANDWIDTH: attributes.bandwidth\n    }, _attributes2['PROGRAM-ID'] = 1, _attributes2),\n    uri: '',\n    endList: attributes.type === 'static',\n    timeline: attributes.periodStart,\n    resolvedUri: '',\n    targetDuration: attributes.duration,\n    discontinuityStarts: discontinuityStarts,\n    timelineStarts: attributes.timelineStarts,\n    segments: segments\n  };\n\n  if (attributes.frameRate) {\n    playlist.attributes['FRAME-RATE'] = attributes.frameRate;\n  }\n\n  if (attributes.contentProtection) {\n    playlist.contentProtection = attributes.contentProtection;\n  }\n\n  if (sidx) {\n    playlist.sidx = sidx;\n  }\n\n  return playlist;\n};\n\nvar videoOnly = function videoOnly(_ref4) {\n  var attributes = _ref4.attributes;\n  return attributes.mimeType === 'video/mp4' || attributes.mimeType === 'video/webm' || attributes.contentType === 'video';\n};\n\nvar audioOnly = function audioOnly(_ref5) {\n  var attributes = _ref5.attributes;\n  return attributes.mimeType === 'audio/mp4' || attributes.mimeType === 'audio/webm' || attributes.contentType === 'audio';\n};\n\nvar vttOnly = function vttOnly(_ref6) {\n  var attributes = _ref6.attributes;\n  return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';\n};\n/**\n * Contains start and timeline properties denoting a timeline start. For DASH, these will\n * be the same number.\n *\n * @typedef {Object} TimelineStart\n * @property {number} start - the start time of the timeline\n * @property {number} timeline - the timeline number\n */\n\n/**\n * Adds appropriate media and discontinuity sequence values to the segments and playlists.\n *\n * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a\n * DASH specific attribute used in constructing segment URI's from templates. However, from\n * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`\n * value, which should start at the original media sequence value (or 0) and increment by 1\n * for each segment thereafter. Since DASH's `startNumber` values are independent per\n * period, it doesn't make sense to use it for `number`. Instead, assume everything starts\n * from a 0 mediaSequence value and increment from there.\n *\n * Note that VHS currently doesn't use the `number` property, but it can be helpful for\n * debugging and making sense of the manifest.\n *\n * For live playlists, to account for values increasing in manifests when periods are\n * removed on refreshes, merging logic should be used to update the numbers to their\n * appropriate values (to ensure they're sequential and increasing).\n *\n * @param {Object[]} playlists - the playlists to update\n * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest\n */\n\n\nvar addMediaSequenceValues = function addMediaSequenceValues(playlists, timelineStarts) {\n  // increment all segments sequentially\n  playlists.forEach(function (playlist) {\n    playlist.mediaSequence = 0;\n    playlist.discontinuitySequence = findIndex(timelineStarts, function (_ref7) {\n      var timeline = _ref7.timeline;\n      return timeline === playlist.timeline;\n    });\n\n    if (!playlist.segments) {\n      return;\n    }\n\n    playlist.segments.forEach(function (segment, index) {\n      segment.number = index;\n    });\n  });\n};\n/**\n * Given a media group object, flattens all playlists within the media group into a single\n * array.\n *\n * @param {Object} mediaGroupObject - the media group object\n *\n * @return {Object[]}\n *         The media group playlists\n */\n\nvar flattenMediaGroupPlaylists = function flattenMediaGroupPlaylists(mediaGroupObject) {\n  if (!mediaGroupObject) {\n    return [];\n  }\n\n  return Object.keys(mediaGroupObject).reduce(function (acc, label) {\n    var labelContents = mediaGroupObject[label];\n    return acc.concat(labelContents.playlists);\n  }, []);\n};\nvar toM3u8 = function toM3u8(_ref8) {\n  var _mediaGroups;\n\n  var dashPlaylists = _ref8.dashPlaylists,\n      locations = _ref8.locations,\n      _ref8$sidxMapping = _ref8.sidxMapping,\n      sidxMapping = _ref8$sidxMapping === void 0 ? {} : _ref8$sidxMapping,\n      previousManifest = _ref8.previousManifest;\n\n  if (!dashPlaylists.length) {\n    return {};\n  } // grab all main manifest attributes\n\n\n  var _dashPlaylists$0$attr = dashPlaylists[0].attributes,\n      duration = _dashPlaylists$0$attr.sourceDuration,\n      type = _dashPlaylists$0$attr.type,\n      suggestedPresentationDelay = _dashPlaylists$0$attr.suggestedPresentationDelay,\n      minimumUpdatePeriod = _dashPlaylists$0$attr.minimumUpdatePeriod;\n  var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);\n  var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));\n  var vttPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(vttOnly));\n  var captions = dashPlaylists.map(function (playlist) {\n    return playlist.attributes.captionServices;\n  }).filter(Boolean);\n  var manifest = {\n    allowCache: true,\n    discontinuityStarts: [],\n    segments: [],\n    endList: true,\n    mediaGroups: (_mediaGroups = {\n      AUDIO: {},\n      VIDEO: {}\n    }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),\n    uri: '',\n    duration: duration,\n    playlists: addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)\n  };\n\n  if (minimumUpdatePeriod >= 0) {\n    manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;\n  }\n\n  if (locations) {\n    manifest.locations = locations;\n  }\n\n  if (type === 'dynamic') {\n    manifest.suggestedPresentationDelay = suggestedPresentationDelay;\n  }\n\n  var isAudioOnly = manifest.playlists.length === 0;\n  var organizedAudioGroup = audioPlaylists.length ? organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;\n  var organizedVttGroup = vttPlaylists.length ? organizeVttPlaylists(vttPlaylists, sidxMapping) : null;\n  var formattedPlaylists = videoPlaylists.concat(flattenMediaGroupPlaylists(organizedAudioGroup), flattenMediaGroupPlaylists(organizedVttGroup));\n  var playlistTimelineStarts = formattedPlaylists.map(function (_ref9) {\n    var timelineStarts = _ref9.timelineStarts;\n    return timelineStarts;\n  });\n  manifest.timelineStarts = getUniqueTimelineStarts(playlistTimelineStarts);\n  addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);\n\n  if (organizedAudioGroup) {\n    manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;\n  }\n\n  if (organizedVttGroup) {\n    manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;\n  }\n\n  if (captions.length) {\n    manifest.mediaGroups['CLOSED-CAPTIONS'].cc = organizeCaptionServices(captions);\n  }\n\n  if (previousManifest) {\n    return positionManifestOnTimeline({\n      oldManifest: previousManifest,\n      newManifest: manifest\n    });\n  }\n\n  return manifest;\n};\n\n/**\n * Calculates the R (repetition) value for a live stream (for the final segment\n * in a manifest where the r value is negative 1)\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {number} time\n *        current time (typically the total time up until the final segment)\n * @param {number} duration\n *        duration property for the given <S />\n *\n * @return {number}\n *        R value to reach the end of the given period\n */\nvar getLiveRValue = function getLiveRValue(attributes, time, duration) {\n  var NOW = attributes.NOW,\n      clientOffset = attributes.clientOffset,\n      availabilityStartTime = attributes.availabilityStartTime,\n      _attributes$timescale = attributes.timescale,\n      timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,\n      _attributes$periodSta = attributes.periodStart,\n      periodStart = _attributes$periodSta === void 0 ? 0 : _attributes$periodSta,\n      _attributes$minimumUp = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;\n  var now = (NOW + clientOffset) / 1000;\n  var periodStartWC = availabilityStartTime + periodStart;\n  var periodEndWC = now + minimumUpdatePeriod;\n  var periodDuration = periodEndWC - periodStartWC;\n  return Math.ceil((periodDuration * timescale - time) / duration);\n};\n/**\n * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment\n * timing and duration\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\n\nvar parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {\n  var type = attributes.type,\n      _attributes$minimumUp2 = attributes.minimumUpdatePeriod,\n      minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,\n      _attributes$media = attributes.media,\n      media = _attributes$media === void 0 ? '' : _attributes$media,\n      sourceDuration = attributes.sourceDuration,\n      _attributes$timescale2 = attributes.timescale,\n      timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,\n      _attributes$startNumb = attributes.startNumber,\n      startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,\n      timeline = attributes.periodStart;\n  var segments = [];\n  var time = -1;\n\n  for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {\n    var S = segmentTimeline[sIndex];\n    var duration = S.d;\n    var repeat = S.r || 0;\n    var segmentTime = S.t || 0;\n\n    if (time < 0) {\n      // first segment\n      time = segmentTime;\n    }\n\n    if (segmentTime && segmentTime > time) {\n      // discontinuity\n      // TODO: How to handle this type of discontinuity\n      // timeline++ here would treat it like HLS discontuity and content would\n      // get appended without gap\n      // E.G.\n      //  <S t=\"0\" d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S d=\"1\" />\n      //  <S t=\"5\" d=\"1\" />\n      // would have $Time$ values of [0, 1, 2, 5]\n      // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)\n      // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)\n      // does the value of sourceDuration consider this when calculating arbitrary\n      // negative @r repeat value?\n      // E.G. Same elements as above with this added at the end\n      //  <S d=\"1\" r=\"-1\" />\n      //  with a sourceDuration of 10\n      // Would the 2 gaps be included in the time duration calculations resulting in\n      // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments\n      // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?\n      time = segmentTime;\n    }\n\n    var count = void 0;\n\n    if (repeat < 0) {\n      var nextS = sIndex + 1;\n\n      if (nextS === segmentTimeline.length) {\n        // last segment\n        if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {\n          count = getLiveRValue(attributes, time, duration);\n        } else {\n          // TODO: This may be incorrect depending on conclusion of TODO above\n          count = (sourceDuration * timescale - time) / duration;\n        }\n      } else {\n        count = (segmentTimeline[nextS].t - time) / duration;\n      }\n    } else {\n      count = repeat + 1;\n    }\n\n    var end = startNumber + segments.length + count;\n    var number = startNumber + segments.length;\n\n    while (number < end) {\n      segments.push({\n        number: number,\n        duration: duration / timescale,\n        time: time,\n        timeline: timeline\n      });\n      time += duration;\n      number++;\n    }\n  }\n\n  return segments;\n};\n\nvar identifierPattern = /\\$([A-z]*)(?:(%0)([0-9]+)d)?\\$/g;\n/**\n * Replaces template identifiers with corresponding values. To be used as the callback\n * for String.prototype.replace\n *\n * @name replaceCallback\n * @function\n * @param {string} match\n *        Entire match of identifier\n * @param {string} identifier\n *        Name of matched identifier\n * @param {string} format\n *        Format tag string. Its presence indicates that padding is expected\n * @param {string} width\n *        Desired length of the replaced value. Values less than this width shall be left\n *        zero padded\n * @return {string}\n *         Replacement for the matched identifier\n */\n\n/**\n * Returns a function to be used as a callback for String.prototype.replace to replace\n * template identifiers\n *\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {replaceCallback}\n *         Callback to be used with String.prototype.replace to replace identifiers\n */\n\nvar identifierReplacement = function identifierReplacement(values) {\n  return function (match, identifier, format, width) {\n    if (match === '$$') {\n      // escape sequence\n      return '$';\n    }\n\n    if (typeof values[identifier] === 'undefined') {\n      return match;\n    }\n\n    var value = '' + values[identifier];\n\n    if (identifier === 'RepresentationID') {\n      // Format tag shall not be present with RepresentationID\n      return value;\n    }\n\n    if (!format) {\n      width = 1;\n    } else {\n      width = parseInt(width, 10);\n    }\n\n    if (value.length >= width) {\n      return value;\n    }\n\n    return \"\" + new Array(width - value.length + 1).join('0') + value;\n  };\n};\n/**\n * Constructs a segment url from a template string\n *\n * @param {string} url\n *        Template string to construct url from\n * @param {Obect} values\n *        Object containing values that shall be used to replace known identifiers\n * @param {number} values.RepresentationID\n *        Value of the Representation@id attribute\n * @param {number} values.Number\n *        Number of the corresponding segment\n * @param {number} values.Bandwidth\n *        Value of the Representation@bandwidth attribute.\n * @param {number} values.Time\n *        Timestamp value of the corresponding segment\n * @return {string}\n *         Segment url with identifiers replaced\n */\n\nvar constructTemplateUrl = function constructTemplateUrl(url, values) {\n  return url.replace(identifierPattern, identifierReplacement(values));\n};\n/**\n * Generates a list of objects containing timing and duration information about each\n * segment needed to generate segment uris and the complete segment object\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {{number: number, duration: number, time: number, timeline: number}[]}\n *         List of Objects with segment timing and duration info\n */\n\nvar parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {\n  if (!attributes.duration && !segmentTimeline) {\n    // if neither @duration or SegmentTimeline are present, then there shall be exactly\n    // one media segment\n    return [{\n      number: attributes.startNumber || 1,\n      duration: attributes.sourceDuration,\n      time: 0,\n      timeline: attributes.periodStart\n    }];\n  }\n\n  if (attributes.duration) {\n    return parseByDuration(attributes);\n  }\n\n  return parseByTimeline(attributes, segmentTimeline);\n};\n/**\n * Generates a list of segments using information provided by the SegmentTemplate element\n *\n * @param {Object} attributes\n *        Object containing all inherited attributes from parent elements with attribute\n *        names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object[]}\n *         List of segment objects\n */\n\nvar segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {\n  var templateValues = {\n    RepresentationID: attributes.id,\n    Bandwidth: attributes.bandwidth || 0\n  };\n  var _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {\n    sourceURL: '',\n    range: ''\n  } : _attributes$initializ;\n  var mapSegment = urlTypeToSegment({\n    baseUrl: attributes.baseUrl,\n    source: constructTemplateUrl(initialization.sourceURL, templateValues),\n    range: initialization.range\n  });\n  var segments = parseTemplateInfo(attributes, segmentTimeline);\n  return segments.map(function (segment) {\n    templateValues.Number = segment.number;\n    templateValues.Time = segment.time;\n    var uri = constructTemplateUrl(attributes.media || '', templateValues); // See DASH spec section 5.3.9.2.2\n    // - if timescale isn't present on any level, default to 1.\n\n    var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n    var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n    var presentationTime = // Even if the @t attribute is not specified for the segment, segment.time is\n    // calculated in mpd-parser prior to this, so it's assumed to be available.\n    attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;\n    var map = {\n      uri: uri,\n      timeline: segment.timeline,\n      duration: segment.duration,\n      resolvedUri: resolveUrl(attributes.baseUrl || '', uri),\n      map: mapSegment,\n      number: segment.number,\n      presentationTime: presentationTime\n    };\n    return map;\n  });\n};\n\n/**\n * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)\n * to an object that matches the output of a segment in videojs/mpd-parser\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object} segmentUrl\n *   <SegmentURL> node to translate into a segment object\n * @return {Object} translated segment object\n */\n\nvar SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {\n  var baseUrl = attributes.baseUrl,\n      _attributes$initializ = attributes.initialization,\n      initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;\n  var initSegment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: initialization.sourceURL,\n    range: initialization.range\n  });\n  var segment = urlTypeToSegment({\n    baseUrl: baseUrl,\n    source: segmentUrl.media,\n    range: segmentUrl.mediaRange\n  });\n  segment.map = initSegment;\n  return segment;\n};\n/**\n * Generates a list of segments using information provided by the SegmentList element\n * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each\n * node should be translated into segment.\n *\n * @param {Object} attributes\n *   Object containing all inherited attributes from parent elements with attribute\n *   names as keys\n * @param {Object[]|undefined} segmentTimeline\n *        List of objects representing the attributes of each S element contained within\n *        the SegmentTimeline element\n * @return {Object.<Array>} list of segments\n */\n\n\nvar segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {\n  var duration = attributes.duration,\n      _attributes$segmentUr = attributes.segmentUrls,\n      segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr,\n      periodStart = attributes.periodStart; // Per spec (5.3.9.2.1) no way to determine segment duration OR\n  // if both SegmentTimeline and @duration are defined, it is outside of spec.\n\n  if (!duration && !segmentTimeline || duration && segmentTimeline) {\n    throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);\n  }\n\n  var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {\n    return SegmentURLToSegmentObject(attributes, segmentUrlObject);\n  });\n  var segmentTimeInfo;\n\n  if (duration) {\n    segmentTimeInfo = parseByDuration(attributes);\n  }\n\n  if (segmentTimeline) {\n    segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);\n  }\n\n  var segments = segmentTimeInfo.map(function (segmentTime, index) {\n    if (segmentUrlMap[index]) {\n      var segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2\n      // - if timescale isn't present on any level, default to 1.\n\n      var timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0\n\n      var presentationTimeOffset = attributes.presentationTimeOffset || 0;\n      segment.timeline = segmentTime.timeline;\n      segment.duration = segmentTime.duration;\n      segment.number = segmentTime.number;\n      segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;\n      return segment;\n    } // Since we're mapping we should get rid of any blank segments (in case\n    // the given SegmentTimeline is handling for more elements than we have\n    // SegmentURLs for).\n\n  }).filter(function (segment) {\n    return segment;\n  });\n  return segments;\n};\n\nvar generateSegments = function generateSegments(_ref) {\n  var attributes = _ref.attributes,\n      segmentInfo = _ref.segmentInfo;\n  var segmentAttributes;\n  var segmentsFn;\n\n  if (segmentInfo.template) {\n    segmentsFn = segmentsFromTemplate;\n    segmentAttributes = merge(attributes, segmentInfo.template);\n  } else if (segmentInfo.base) {\n    segmentsFn = segmentsFromBase;\n    segmentAttributes = merge(attributes, segmentInfo.base);\n  } else if (segmentInfo.list) {\n    segmentsFn = segmentsFromList;\n    segmentAttributes = merge(attributes, segmentInfo.list);\n  }\n\n  var segmentsInfo = {\n    attributes: attributes\n  };\n\n  if (!segmentsFn) {\n    return segmentsInfo;\n  }\n\n  var segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which\n  // must be in seconds. Since we've generated the segment list, we no longer need\n  // @duration to be in @timescale units, so we can convert it here.\n\n  if (segmentAttributes.duration) {\n    var _segmentAttributes = segmentAttributes,\n        duration = _segmentAttributes.duration,\n        _segmentAttributes$ti = _segmentAttributes.timescale,\n        timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;\n    segmentAttributes.duration = duration / timescale;\n  } else if (segments.length) {\n    // if there is no @duration attribute, use the largest segment duration as\n    // as target duration\n    segmentAttributes.duration = segments.reduce(function (max, segment) {\n      return Math.max(max, Math.ceil(segment.duration));\n    }, 0);\n  } else {\n    segmentAttributes.duration = 0;\n  }\n\n  segmentsInfo.attributes = segmentAttributes;\n  segmentsInfo.segments = segments; // This is a sidx box without actual segment information\n\n  if (segmentInfo.base && segmentAttributes.indexRange) {\n    segmentsInfo.sidx = segments[0];\n    segmentsInfo.segments = [];\n  }\n\n  return segmentsInfo;\n};\nvar toPlaylists = function toPlaylists(representations) {\n  return representations.map(generateSegments);\n};\n\nvar findChildren = function findChildren(element, name) {\n  return from(element.childNodes).filter(function (_ref) {\n    var tagName = _ref.tagName;\n    return tagName === name;\n  });\n};\nvar getContent = function getContent(element) {\n  return element.textContent.trim();\n};\n\n/**\n * Converts the provided string that may contain a division operation to a number.\n *\n * @param {string} value - the provided string value\n *\n * @return {number} the parsed string value\n */\nvar parseDivisionValue = function parseDivisionValue(value) {\n  return parseFloat(value.split('/').reduce(function (prev, current) {\n    return prev / current;\n  }));\n};\n\nvar parseDuration = function parseDuration(str) {\n  var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;\n  var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;\n  var SECONDS_IN_DAY = 24 * 60 * 60;\n  var SECONDS_IN_HOUR = 60 * 60;\n  var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S\n\n  var durationRegex = /P(?:(\\d*)Y)?(?:(\\d*)M)?(?:(\\d*)D)?(?:T(?:(\\d*)H)?(?:(\\d*)M)?(?:([\\d.]*)S)?)?/;\n  var match = durationRegex.exec(str);\n\n  if (!match) {\n    return 0;\n  }\n\n  var _match$slice = match.slice(1),\n      year = _match$slice[0],\n      month = _match$slice[1],\n      day = _match$slice[2],\n      hour = _match$slice[3],\n      minute = _match$slice[4],\n      second = _match$slice[5];\n\n  return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);\n};\nvar parseDate = function parseDate(str) {\n  // Date format without timezone according to ISO 8601\n  // YYY-MM-DDThh:mm:ss.ssssss\n  var dateRegex = /^\\d+-\\d+-\\d+T\\d+:\\d+:\\d+(\\.\\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is\n  // expressed by ending with 'Z'\n\n  if (dateRegex.test(str)) {\n    str += 'Z';\n  }\n\n  return Date.parse(str);\n};\n\nvar parsers = {\n  /**\n   * Specifies the duration of the entire Media Presentation. Format is a duration string\n   * as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  mediaPresentationDuration: function mediaPresentationDuration(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the Segment availability start time for all Segments referred to in this\n   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability\n   * time. Format is a date string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The date as seconds from unix epoch\n   */\n  availabilityStartTime: function availabilityStartTime(value) {\n    return parseDate(value) / 1000;\n  },\n\n  /**\n   * Specifies the smallest period between potential changes to the MPD. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  minimumUpdatePeriod: function minimumUpdatePeriod(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the suggested presentation delay. Format is a\n   * duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  suggestedPresentationDelay: function suggestedPresentationDelay(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * specifices the type of mpd. Can be either \"static\" or \"dynamic\"\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   *\n   * @return {string}\n   *         The type as a string\n   */\n  type: function type(value) {\n    return value;\n  },\n\n  /**\n   * Specifies the duration of the smallest time shifting buffer for any Representation\n   * in the MPD. Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  timeShiftBufferDepth: function timeShiftBufferDepth(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.\n   * Format is a duration string as specified in ISO 8601\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The duration in seconds\n   */\n  start: function start(value) {\n    return parseDuration(value);\n  },\n\n  /**\n   * Specifies the width of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed width\n   */\n  width: function width(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the height of the visual presentation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed height\n   */\n  height: function height(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the bitrate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed bandwidth\n   */\n  bandwidth: function bandwidth(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the frame rate of the representation\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed frame rate\n   */\n  frameRate: function frameRate(value) {\n    return parseDivisionValue(value);\n  },\n\n  /**\n   * Specifies the number of the first Media Segment in this Representation in the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  startNumber: function startNumber(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the timescale in units per seconds\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed timescale\n   */\n  timescale: function timescale(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the presentationTimeOffset.\n   *\n   * @param {string} value\n   *        value of the attribute as a string\n   *\n   * @return {number}\n   *         The parsed presentationTimeOffset\n   */\n  presentationTimeOffset: function presentationTimeOffset(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the constant approximate Segment duration\n   * NOTE: The <Period> element also contains an @duration attribute. This duration\n   *       specifies the duration of the Period. This attribute is currently not\n   *       supported by the rest of the parser, however we still check for it to prevent\n   *       errors.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  duration: function duration(value) {\n    var parsedValue = parseInt(value, 10);\n\n    if (isNaN(parsedValue)) {\n      return parseDuration(value);\n    }\n\n    return parsedValue;\n  },\n\n  /**\n   * Specifies the Segment duration, in units of the value of the @timescale.\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed duration\n   */\n  d: function d(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the MPD start time, in @timescale units, the first Segment in the series\n   * starts relative to the beginning of the Period\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed time\n   */\n  t: function t(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Specifies the repeat count of the number of following contiguous Segments with the\n   * same duration expressed by the value of @d\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {number}\n   *         The parsed number\n   */\n  r: function r(value) {\n    return parseInt(value, 10);\n  },\n\n  /**\n   * Default parser for all other attributes. Acts as a no-op and just returns the value\n   * as a string\n   *\n   * @param {string} value\n   *        value of attribute as a string\n   * @return {string}\n   *         Unparsed value\n   */\n  DEFAULT: function DEFAULT(value) {\n    return value;\n  }\n};\n/**\n * Gets all the attributes and values of the provided node, parses attributes with known\n * types, and returns an object with attribute names mapped to values.\n *\n * @param {Node} el\n *        The node to parse attributes from\n * @return {Object}\n *         Object with all attributes of el parsed\n */\n\nvar parseAttributes = function parseAttributes(el) {\n  if (!(el && el.attributes)) {\n    return {};\n  }\n\n  return from(el.attributes).reduce(function (a, e) {\n    var parseFn = parsers[e.name] || parsers.DEFAULT;\n    a[e.name] = parseFn(e.value);\n    return a;\n  }, {});\n};\n\nvar keySystemsMap = {\n  'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',\n  'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',\n  'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',\n  'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'\n};\n/**\n * Builds a list of urls that is the product of the reference urls and BaseURL values\n *\n * @param {string[]} referenceUrls\n *        List of reference urls to resolve to\n * @param {Node[]} baseUrlElements\n *        List of BaseURL nodes from the mpd\n * @return {string[]}\n *         List of resolved urls\n */\n\nvar buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {\n  if (!baseUrlElements.length) {\n    return referenceUrls;\n  }\n\n  return flatten(referenceUrls.map(function (reference) {\n    return baseUrlElements.map(function (baseUrlElement) {\n      return resolveUrl(reference, getContent(baseUrlElement));\n    });\n  }));\n};\n/**\n * Contains all Segment information for its containing AdaptationSet\n *\n * @typedef {Object} SegmentInformation\n * @property {Object|undefined} template\n *           Contains the attributes for the SegmentTemplate node\n * @property {Object[]|undefined} segmentTimeline\n *           Contains a list of atrributes for each S node within the SegmentTimeline node\n * @property {Object|undefined} list\n *           Contains the attributes for the SegmentList node\n * @property {Object|undefined} base\n *           Contains the attributes for the SegmentBase node\n */\n\n/**\n * Returns all available Segment information contained within the AdaptationSet node\n *\n * @param {Node} adaptationSet\n *        The AdaptationSet node to get Segment information from\n * @return {SegmentInformation}\n *         The Segment information contained within the provided AdaptationSet\n */\n\nvar getSegmentInformation = function getSegmentInformation(adaptationSet) {\n  var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];\n  var segmentList = findChildren(adaptationSet, 'SegmentList')[0];\n  var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {\n    return merge({\n      tag: 'SegmentURL'\n    }, parseAttributes(s));\n  });\n  var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];\n  var segmentTimelineParentNode = segmentList || segmentTemplate;\n  var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];\n  var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;\n  var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both\n  // @initialization and an <Initialization> node.  @initialization can be templated,\n  // while the node can have a url and range specified.  If the <SegmentTemplate> has\n  // both @initialization and an <Initialization> subelement we opt to override with\n  // the node, as this interaction is not defined in the spec.\n\n  var template = segmentTemplate && parseAttributes(segmentTemplate);\n\n  if (template && segmentInitialization) {\n    template.initialization = segmentInitialization && parseAttributes(segmentInitialization);\n  } else if (template && template.initialization) {\n    // If it is @initialization we convert it to an object since this is the format that\n    // later functions will rely on for the initialization segment.  This is only valid\n    // for <SegmentTemplate>\n    template.initialization = {\n      sourceURL: template.initialization\n    };\n  }\n\n  var segmentInfo = {\n    template: template,\n    segmentTimeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {\n      return parseAttributes(s);\n    }),\n    list: segmentList && merge(parseAttributes(segmentList), {\n      segmentUrls: segmentUrls,\n      initialization: parseAttributes(segmentInitialization)\n    }),\n    base: segmentBase && merge(parseAttributes(segmentBase), {\n      initialization: parseAttributes(segmentInitialization)\n    })\n  };\n  Object.keys(segmentInfo).forEach(function (key) {\n    if (!segmentInfo[key]) {\n      delete segmentInfo[key];\n    }\n  });\n  return segmentInfo;\n};\n/**\n * Contains Segment information and attributes needed to construct a Playlist object\n * from a Representation\n *\n * @typedef {Object} RepresentationInformation\n * @property {SegmentInformation} segmentInfo\n *           Segment information for this Representation\n * @property {Object} attributes\n *           Inherited attributes for this Representation\n */\n\n/**\n * Maps a Representation node to an object containing Segment information and attributes\n *\n * @name inheritBaseUrlsCallback\n * @function\n * @param {Node} representation\n *        Representation node from the mpd\n * @return {RepresentationInformation}\n *         Representation information needed to construct a Playlist object\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Representation nodes to\n * Segment information and attributes using inherited BaseURL nodes.\n *\n * @param {Object} adaptationSetAttributes\n *        Contains attributes inherited by the AdaptationSet\n * @param {string[]} adaptationSetBaseUrls\n *        Contains list of resolved base urls inherited by the AdaptationSet\n * @param {SegmentInformation} adaptationSetSegmentInfo\n *        Contains Segment information for the AdaptationSet\n * @return {inheritBaseUrlsCallback}\n *         Callback map function\n */\n\nvar inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {\n  return function (representation) {\n    var repBaseUrlElements = findChildren(representation, 'BaseURL');\n    var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);\n    var attributes = merge(adaptationSetAttributes, parseAttributes(representation));\n    var representationSegmentInfo = getSegmentInformation(representation);\n    return repBaseUrls.map(function (baseUrl) {\n      return {\n        segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),\n        attributes: merge(attributes, {\n          baseUrl: baseUrl\n        })\n      };\n    });\n  };\n};\n/**\n * Tranforms a series of content protection nodes to\n * an object containing pssh data by key system\n *\n * @param {Node[]} contentProtectionNodes\n *        Content protection nodes\n * @return {Object}\n *        Object containing pssh data by key system\n */\n\nvar generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {\n  return contentProtectionNodes.reduce(function (acc, node) {\n    var attributes = parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated\n    // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system\n    // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do\n    // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).\n\n    if (attributes.schemeIdUri) {\n      attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();\n    }\n\n    var keySystem = keySystemsMap[attributes.schemeIdUri];\n\n    if (keySystem) {\n      acc[keySystem] = {\n        attributes: attributes\n      };\n      var psshNode = findChildren(node, 'cenc:pssh')[0];\n\n      if (psshNode) {\n        var pssh = getContent(psshNode);\n        acc[keySystem].pssh = pssh && decodeB64ToUint8Array(pssh);\n      }\n    }\n\n    return acc;\n  }, {});\n}; // defined in ANSI_SCTE 214-1 2016\n\n\nvar parseCaptionServiceMetadata = function parseCaptionServiceMetadata(service) {\n  // 608 captions\n  if (service.schemeIdUri === 'urn:scte:dash:cc:cea-608:2015') {\n    var values = typeof service.value !== 'string' ? [] : service.value.split(';');\n    return values.map(function (value) {\n      var channel;\n      var language; // default language to value\n\n      language = value;\n\n      if (/^CC\\d=/.test(value)) {\n        var _value$split = value.split('=');\n\n        channel = _value$split[0];\n        language = _value$split[1];\n      } else if (/^CC\\d$/.test(value)) {\n        channel = value;\n      }\n\n      return {\n        channel: channel,\n        language: language\n      };\n    });\n  } else if (service.schemeIdUri === 'urn:scte:dash:cc:cea-708:2015') {\n    var _values = typeof service.value !== 'string' ? [] : service.value.split(';');\n\n    return _values.map(function (value) {\n      var flags = {\n        // service or channel number 1-63\n        'channel': undefined,\n        // language is a 3ALPHA per ISO 639.2/B\n        // field is required\n        'language': undefined,\n        // BIT 1/0 or ?\n        // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown\n        'aspectRatio': 1,\n        // BIT 1/0\n        // easy reader flag indicated the text is tailed to the needs of beginning readers\n        // default 0, or off\n        'easyReader': 0,\n        // BIT 1/0\n        // If 3d metadata is present (CEA-708.1) then 1\n        // default 0\n        '3D': 0\n      };\n\n      if (/=/.test(value)) {\n        var _value$split2 = value.split('='),\n            channel = _value$split2[0],\n            _value$split2$ = _value$split2[1],\n            opts = _value$split2$ === void 0 ? '' : _value$split2$;\n\n        flags.channel = channel;\n        flags.language = value;\n        opts.split(',').forEach(function (opt) {\n          var _opt$split = opt.split(':'),\n              name = _opt$split[0],\n              val = _opt$split[1];\n\n          if (name === 'lang') {\n            flags.language = val; // er for easyReadery\n          } else if (name === 'er') {\n            flags.easyReader = Number(val); // war for wide aspect ratio\n          } else if (name === 'war') {\n            flags.aspectRatio = Number(val);\n          } else if (name === '3D') {\n            flags['3D'] = Number(val);\n          }\n        });\n      } else {\n        flags.language = value;\n      }\n\n      if (flags.channel) {\n        flags.channel = 'SERVICE' + flags.channel;\n      }\n\n      return flags;\n    });\n  }\n};\n/**\n * Maps an AdaptationSet node to a list of Representation information objects\n *\n * @name toRepresentationsCallback\n * @function\n * @param {Node} adaptationSet\n *        AdaptationSet node from the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of\n * Representation information objects\n *\n * @param {Object} periodAttributes\n *        Contains attributes inherited by the Period\n * @param {string[]} periodBaseUrls\n *        Contains list of resolved base urls inherited by the Period\n * @param {string[]} periodSegmentInfo\n *        Contains Segment Information at the period level\n * @return {toRepresentationsCallback}\n *         Callback map function\n */\n\nvar toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {\n  return function (adaptationSet) {\n    var adaptationSetAttributes = parseAttributes(adaptationSet);\n    var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));\n    var role = findChildren(adaptationSet, 'Role')[0];\n    var roleAttributes = {\n      role: parseAttributes(role)\n    };\n    var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);\n    var accessibility = findChildren(adaptationSet, 'Accessibility')[0];\n    var captionServices = parseCaptionServiceMetadata(parseAttributes(accessibility));\n\n    if (captionServices) {\n      attrs = merge(attrs, {\n        captionServices: captionServices\n      });\n    }\n\n    var label = findChildren(adaptationSet, 'Label')[0];\n\n    if (label && label.childNodes.length) {\n      var labelVal = label.childNodes[0].nodeValue.trim();\n      attrs = merge(attrs, {\n        label: labelVal\n      });\n    }\n\n    var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));\n\n    if (Object.keys(contentProtection).length) {\n      attrs = merge(attrs, {\n        contentProtection: contentProtection\n      });\n    }\n\n    var segmentInfo = getSegmentInformation(adaptationSet);\n    var representations = findChildren(adaptationSet, 'Representation');\n    var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);\n    return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));\n  };\n};\n/**\n * Contains all period information for mapping nodes onto adaptation sets.\n *\n * @typedef {Object} PeriodInformation\n * @property {Node} period.node\n *           Period node from the mpd\n * @property {Object} period.attributes\n *           Parsed period attributes from node plus any added\n */\n\n/**\n * Maps a PeriodInformation object to a list of Representation information objects for all\n * AdaptationSet nodes contained within the Period.\n *\n * @name toAdaptationSetsCallback\n * @function\n * @param {PeriodInformation} period\n *        Period object containing necessary period information\n * @param {number} periodStart\n *        Start time of the Period within the mpd\n * @return {RepresentationInformation[]}\n *         List of objects containing Representaion information\n */\n\n/**\n * Returns a callback for Array.prototype.map for mapping Period nodes to a list of\n * Representation information objects\n *\n * @param {Object} mpdAttributes\n *        Contains attributes inherited by the mpd\n * @param {string[]} mpdBaseUrls\n *        Contains list of resolved base urls inherited by the mpd\n * @return {toAdaptationSetsCallback}\n *         Callback map function\n */\n\nvar toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {\n  return function (period, index) {\n    var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period.node, 'BaseURL'));\n    var periodAttributes = merge(mpdAttributes, {\n      periodStart: period.attributes.start\n    });\n\n    if (typeof period.attributes.duration === 'number') {\n      periodAttributes.periodDuration = period.attributes.duration;\n    }\n\n    var adaptationSets = findChildren(period.node, 'AdaptationSet');\n    var periodSegmentInfo = getSegmentInformation(period.node);\n    return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));\n  };\n};\n/**\n * Gets Period@start property for a given period.\n *\n * @param {Object} options\n *        Options object\n * @param {Object} options.attributes\n *        Period attributes\n * @param {Object} [options.priorPeriodAttributes]\n *        Prior period attributes (if prior period is available)\n * @param {string} options.mpdType\n *        The MPD@type these periods came from\n * @return {number|null}\n *         The period start, or null if it's an early available period or error\n */\n\nvar getPeriodStart = function getPeriodStart(_ref) {\n  var attributes = _ref.attributes,\n      priorPeriodAttributes = _ref.priorPeriodAttributes,\n      mpdType = _ref.mpdType;\n\n  // Summary of period start time calculation from DASH spec section 5.3.2.1\n  //\n  // A period's start is the first period's start + time elapsed after playing all\n  // prior periods to this one. Periods continue one after the other in time (without\n  // gaps) until the end of the presentation.\n  //\n  // The value of Period@start should be:\n  // 1. if Period@start is present: value of Period@start\n  // 2. if previous period exists and it has @duration: previous Period@start +\n  //    previous Period@duration\n  // 3. if this is first period and MPD@type is 'static': 0\n  // 4. in all other cases, consider the period an \"early available period\" (note: not\n  //    currently supported)\n  // (1)\n  if (typeof attributes.start === 'number') {\n    return attributes.start;\n  } // (2)\n\n\n  if (priorPeriodAttributes && typeof priorPeriodAttributes.start === 'number' && typeof priorPeriodAttributes.duration === 'number') {\n    return priorPeriodAttributes.start + priorPeriodAttributes.duration;\n  } // (3)\n\n\n  if (!priorPeriodAttributes && mpdType === 'static') {\n    return 0;\n  } // (4)\n  // There is currently no logic for calculating the Period@start value if there is\n  // no Period@start or prior Period@start and Period@duration available. This is not made\n  // explicit by the DASH interop guidelines or the DASH spec, however, since there's\n  // nothing about any other resolution strategies, it's implied. Thus, this case should\n  // be considered an early available period, or error, and null should suffice for both\n  // of those cases.\n\n\n  return null;\n};\n/**\n * Traverses the mpd xml tree to generate a list of Representation information objects\n * that have inherited attributes from parent nodes\n *\n * @param {Node} mpd\n *        The root node of the mpd\n * @param {Object} options\n *        Available options for inheritAttributes\n * @param {string} options.manifestUri\n *        The uri source of the mpd\n * @param {number} options.NOW\n *        Current time per DASH IOP.  Default is current time in ms since epoch\n * @param {number} options.clientOffset\n *        Client time difference from NOW (in milliseconds)\n * @return {RepresentationInformation[]}\n *         List of objects containing Representation information\n */\n\nvar inheritAttributes = function inheritAttributes(mpd, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$manifestUri = _options.manifestUri,\n      manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,\n      _options$NOW = _options.NOW,\n      NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,\n      _options$clientOffset = _options.clientOffset,\n      clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;\n  var periodNodes = findChildren(mpd, 'Period');\n\n  if (!periodNodes.length) {\n    throw new Error(errors.INVALID_NUMBER_OF_PERIOD);\n  }\n\n  var locations = findChildren(mpd, 'Location');\n  var mpdAttributes = parseAttributes(mpd);\n  var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL')); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.\n\n  mpdAttributes.type = mpdAttributes.type || 'static';\n  mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;\n  mpdAttributes.NOW = NOW;\n  mpdAttributes.clientOffset = clientOffset;\n\n  if (locations.length) {\n    mpdAttributes.locations = locations.map(getContent);\n  }\n\n  var periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to\n  // adding properties that require looking at prior periods is to parse attributes and add\n  // missing ones before toAdaptationSets is called. If more such properties are added, it\n  // may be better to refactor toAdaptationSets.\n\n  periodNodes.forEach(function (node, index) {\n    var attributes = parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary\n    // for this period.\n\n    var priorPeriod = periods[index - 1];\n    attributes.start = getPeriodStart({\n      attributes: attributes,\n      priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,\n      mpdType: mpdAttributes.type\n    });\n    periods.push({\n      node: node,\n      attributes: attributes\n    });\n  });\n  return {\n    locations: mpdAttributes.locations,\n    representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))\n  };\n};\n\nvar stringToMpdXml = function stringToMpdXml(manifestString) {\n  if (manifestString === '') {\n    throw new Error(errors.DASH_EMPTY_MANIFEST);\n  }\n\n  var parser = new DOMParser();\n  var xml;\n  var mpd;\n\n  try {\n    xml = parser.parseFromString(manifestString, 'application/xml');\n    mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;\n  } catch (e) {// ie 11 throwsw on invalid xml\n  }\n\n  if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {\n    throw new Error(errors.DASH_INVALID_XML);\n  }\n\n  return mpd;\n};\n\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} mpd\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\nvar parseUTCTimingScheme = function parseUTCTimingScheme(mpd) {\n  var UTCTimingNode = findChildren(mpd, 'UTCTiming')[0];\n\n  if (!UTCTimingNode) {\n    return null;\n  }\n\n  var attributes = parseAttributes(UTCTimingNode);\n\n  switch (attributes.schemeIdUri) {\n    case 'urn:mpeg:dash:utc:http-head:2014':\n    case 'urn:mpeg:dash:utc:http-head:2012':\n      attributes.method = 'HEAD';\n      break;\n\n    case 'urn:mpeg:dash:utc:http-xsdate:2014':\n    case 'urn:mpeg:dash:utc:http-iso:2014':\n    case 'urn:mpeg:dash:utc:http-xsdate:2012':\n    case 'urn:mpeg:dash:utc:http-iso:2012':\n      attributes.method = 'GET';\n      break;\n\n    case 'urn:mpeg:dash:utc:direct:2014':\n    case 'urn:mpeg:dash:utc:direct:2012':\n      attributes.method = 'DIRECT';\n      attributes.value = Date.parse(attributes.value);\n      break;\n\n    case 'urn:mpeg:dash:utc:http-ntp:2014':\n    case 'urn:mpeg:dash:utc:ntp:2014':\n    case 'urn:mpeg:dash:utc:sntp:2014':\n    default:\n      throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);\n  }\n\n  return attributes;\n};\n\nvar VERSION = version;\n/*\n * Given a DASH manifest string and options, parses the DASH manifest into an object in the\n * form outputed by m3u8-parser and accepted by videojs/http-streaming.\n *\n * For live DASH manifests, if `previousManifest` is provided in options, then the newly\n * parsed DASH manifest will have its media sequence and discontinuity sequence values\n * updated to reflect its position relative to the prior manifest.\n *\n * @param {string} manifestString - the DASH manifest as a string\n * @param {options} [options] - any options\n *\n * @return {Object} the manifest object\n */\n\nvar parse = function parse(manifestString, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);\n  var playlists = toPlaylists(parsedManifestInfo.representationInfo);\n  return toM3u8({\n    dashPlaylists: playlists,\n    locations: parsedManifestInfo.locations,\n    sidxMapping: options.sidxMapping,\n    previousManifest: options.previousManifest\n  });\n};\n/**\n * Parses the manifest for a UTCTiming node, returning the nodes attributes if found\n *\n * @param {string} manifestString\n *        XML string of the MPD manifest\n * @return {Object|null}\n *         Attributes of UTCTiming node specified in the manifest. Null if none found\n */\n\n\nvar parseUTCTiming = function parseUTCTiming(manifestString) {\n  return parseUTCTimingScheme(stringToMpdXml(manifestString));\n};\n\nexport { VERSION, addSidxSegmentsToPlaylist$1 as addSidxSegmentsToPlaylist, generateSidxKey, inheritAttributes, parse, parseUTCTiming, stringToMpdXml, toM3u8, toPlaylists };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}