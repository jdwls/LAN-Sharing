{"ast":null,"code":"import axios from \"axios\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\nexport default {\n  name: \"SelectedDir\",\n  methods: {\n    async selectDir() {\n      try {\n        const api = this.$store.state.api;\n        const response = await axios.post(`${api}/selectedDir`);\n        const dirname = response.data.data;\n        await this.showConfirmation(dirname);\n        if (dirname) {\n          this.$store.state.DirPath = await this.handleDirSelection(dirname, api);\n        }\n      } catch (error) {\n        ElMessage({\n          type: \"error\",\n          message: \"出错了: \" + error.message\n        });\n      }\n    },\n    async showConfirmation(dirname) {\n      return ElMessageBox.confirm(dirname, \"警告\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      });\n    },\n    async handleDirSelection(dirname, api) {\n      try {\n        const response = await axios.get(`${api}/SucceedselectedDir`, {\n          params: {\n            dirname\n          }\n        });\n        const dirPath = response.data.data;\n        this.$store.state.DirPath = dirPath;\n        console.log(\"选择的目录路径:\", dirPath);\n        const dirsFileList = await this.fetchDirsFileList(dirPath, api);\n        this.$store.state.DirsFileList = dirsFileList;\n        return dirPath;\n      } catch (error) {\n        ElMessage({\n          type: \"error\",\n          message: \"处理目录选择时出错: \" + error.message\n        });\n      }\n    },\n    async fetchDirsFileList(dirPath, api) {\n      try {\n        const response = await axios.post(`${api}/DirsFileList`, {\n          params: {\n            DirsFileList: dirPath\n          }\n        });\n        return this.processDirsFileList(response.data.data, api);\n      } catch (error) {\n        ElMessage({\n          type: \"error\",\n          message: \"获取目录文件列表时出错: \" + error.message\n        });\n      }\n    },\n    async processDirsFileList(dirsFileList, api) {\n      const updatedList = dirsFileList.map((item, index) => ({\n        index,\n        data: item,\n        FileType: false\n      }));\n      try {\n        const openDirResponse = await axios.post(`${api}/OpenDir`);\n        const folders = Object.values(openDirResponse.data.su);\n        updatedList.forEach(dir => {\n          if (folders.includes(dir.data)) {\n            dir.FileType = \"文件夹\";\n          }\n        });\n        const fileTypesResponse = await axios.get(`${api}/filesypess`, {\n          params: {\n            filesypessPath: this.$store.state.DirPath\n          }\n        });\n        const fileTypes = Object.values(fileTypesResponse.data.filesypessPathlistTypes);\n        fileTypes.forEach(type => {\n          updatedList[type.index].FileType = type.filesypessPathlistType;\n        });\n        return updatedList;\n      } catch (error) {\n        ElMessage({\n          type: \"error\",\n          message: \"处理文件类型时出错: \" + error.message\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","ElMessageBox","name","methods","selectDir","api","$store","state","response","post","dirname","data","showConfirmation","DirPath","handleDirSelection","error","type","message","confirm","confirmButtonText","cancelButtonText","get","params","dirPath","console","log","dirsFileList","fetchDirsFileList","DirsFileList","processDirsFileList","updatedList","map","item","index","FileType","openDirResponse","folders","Object","values","su","forEach","dir","includes","fileTypesResponse","filesypessPath","fileTypes","filesypessPathlistTypes","filesypessPathlistType"],"sources":["F:\\Windows\\Desktop\\code\\restvue003\\src\\components\\selectedDir.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-button @click=\"selectDir\">选择根目录</el-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport { ElMessage, ElMessageBox } from \"element-plus\";\r\n\r\nexport default {\r\n  name: \"SelectedDir\",\r\n  methods: {\r\n    async selectDir() {\r\n      try {\r\n        const api = this.$store.state.api;\r\n        const response = await axios.post(`${api}/selectedDir`);\r\n        const dirname = response.data.data;\r\n\r\n        await this.showConfirmation(dirname);\r\n        if (dirname) {\r\n          this.$store.state.DirPath = await this.handleDirSelection(\r\n            dirname,\r\n            api\r\n          );\r\n        }\r\n      } catch (error) {\r\n        ElMessage({ type: \"error\", message: \"出错了: \" + error.message });\r\n      }\r\n    },\r\n\r\n    async showConfirmation(dirname) {\r\n      return ElMessageBox.confirm(dirname, \"警告\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n      });\r\n    },\r\n\r\n    async handleDirSelection(dirname, api) {\r\n      try {\r\n        const response = await axios.get(`${api}/SucceedselectedDir`, {\r\n          params: { dirname },\r\n        });\r\n        const dirPath = response.data.data;\r\n        this.$store.state.DirPath = dirPath;\r\n        console.log(\"选择的目录路径:\", dirPath);\r\n        const dirsFileList = await this.fetchDirsFileList(dirPath, api);\r\n        this.$store.state.DirsFileList = dirsFileList;\r\n\r\n        return dirPath;\r\n      } catch (error) {\r\n        ElMessage({\r\n          type: \"error\",\r\n          message: \"处理目录选择时出错: \" + error.message,\r\n        });\r\n      }\r\n    },\r\n\r\n    async fetchDirsFileList(dirPath, api) {\r\n      try {\r\n        const response = await axios.post(`${api}/DirsFileList`, {\r\n          params: { DirsFileList: dirPath },\r\n        });\r\n        return this.processDirsFileList(response.data.data, api);\r\n      } catch (error) {\r\n        ElMessage({\r\n          type: \"error\",\r\n          message: \"获取目录文件列表时出错: \" + error.message,\r\n        });\r\n      }\r\n    },\r\n\r\n    async processDirsFileList(dirsFileList, api) {\r\n      const updatedList = dirsFileList.map((item, index) => ({\r\n        index,\r\n        data: item,\r\n        FileType: false,\r\n      }));\r\n\r\n      try {\r\n        const openDirResponse = await axios.post(`${api}/OpenDir`);\r\n        const folders = Object.values(openDirResponse.data.su);\r\n\r\n        updatedList.forEach((dir) => {\r\n          if (folders.includes(dir.data)) {\r\n            dir.FileType = \"文件夹\";\r\n          }\r\n        });\r\n\r\n        const fileTypesResponse = await axios.get(`${api}/filesypess`, {\r\n          params: { filesypessPath: this.$store.state.DirPath },\r\n        });\r\n\r\n        const fileTypes = Object.values(\r\n          fileTypesResponse.data.filesypessPathlistTypes\r\n        );\r\n        fileTypes.forEach((type) => {\r\n          updatedList[type.index].FileType = type.filesypessPathlistType;\r\n        });\r\n\r\n        return updatedList;\r\n      } catch (error) {\r\n        ElMessage({\r\n          type: \"error\",\r\n          message: \"处理文件类型时出错: \" + error.message,\r\n        });\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}