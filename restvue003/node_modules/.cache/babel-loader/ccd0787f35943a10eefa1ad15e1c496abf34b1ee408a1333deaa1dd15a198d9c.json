{"ast":null,"code":"import { ElMessageBox } from 'element-plus';\nimport axios from 'axios';\nimport { KeyMain } from '@/components/Common/KeyMain.js';\nexport default {\n  name: 'LogupView',\n  data() {\n    return {\n      form: {\n        name: \"\",\n        password: \"\",\n        Twopassword: \"\"\n      }\n    };\n  },\n  methods: {\n    submitForm() {\n      const UsesCheck = /^[A-Za-z0-9_]{6,12}$/;\n      const passwordCheck = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&.])[A-Za-z\\d@$!%*?&.]{8,16}$/;\n      if (this.form.name == '' || this.form.password == '' || this.form.Twopassword == '') {\n        ElMessageBox.alert(\"用户名和密码不能为空\", '为空检测', {\n          showConfirmButton: true,\n          confirmButtonText: '确认'\n        }).then(() => {\n          this.form.name = '';\n          this.form.password = '';\n          this.form.Twopassword = '';\n        }).catch(() => {\n          console.log('无');\n        });\n        return 0;\n      }\n      if (this.form.name.match(UsesCheck) == null) {\n        ElMessageBox.alert(\"用户名只能包含大小写字母、数字和下划线，且长度在6到12个字符之间\", '用户名错误', {\n          showConfirmButton: true,\n          confirmButtonText: '确认'\n        }).then(() => {\n          this.form.name = '';\n          this.form.password = '';\n          this.form.Twopassword = '';\n        }).catch(() => {\n          console.log('无');\n        });\n        return 0;\n      }\n      if (this.form.password.match(passwordCheck) == null) {\n        ElMessageBox.alert(\"一个大写字母、一个小写字母、一个数字和一个特殊字符，且长度至少为8个字符\", '密码错误', {\n          showConfirmButton: true,\n          confirmButtonText: '确认'\n        }).then(() => {\n          this.form.name = '';\n          this.form.password = '';\n          this.form.Twopassword = '';\n        }).catch(() => {\n          console.log('无');\n        });\n        return 0;\n      }\n      if (this.form.password != this.form.Twopassword) {\n        ElMessageBox.alert(\"第一次输入的密码需要第二次一样\", '密码没有重复', {\n          showConfirmButton: true,\n          confirmButtonText: '确认'\n        }).then(() => {\n          this.form.name = '';\n          this.form.password = '';\n          this.form.Twopassword = '';\n        }).catch(() => {\n          console.log('无');\n        });\n        return 0;\n      }\n      if (this.form.password.match(passwordCheck) != null && this.form.Twopassword.match(passwordCheck) != null && this.form.name.match(UsesCheck) != null && this.form.Twopassword != '' && this.form.password != '' && this.form.name) {\n        axios({\n          url: this.$store.state.api + '/Logup',\n          method: \"get\",\n          params: {\n            'name': this.form.name,\n            'MD5AESBehind': KeyMain(this.form.password),\n            'Time': Date.now()\n          }\n        }).then(res => {\n          if (res.data.error == '用户名已经存在,请重新输入用户名') {\n            ElMessageBox.alert(\"用户名已经存在：\" + res.data.message, '用户名已经存在：', {\n              showConfirmButton: true,\n              confirmButtonText: '确认'\n            });\n          }\n          ElMessageBox.alert(\"用户创建名为：\" + res.data.message, '用户创建成功', {\n            showConfirmButton: true,\n            confirmButtonText: '确认'\n          }).then(() => {\n            this.form.name = '';\n            this.form.password = '';\n            this.form.Twopassword = '';\n            this.$store.state.dialogVisible = false;\n            this.$store.state.FilesTyoes = '登录';\n            this.$store.state.dialogVisible = true;\n          });\n        }).catch(() => {\n          console.log('无');\n        });\n      }\n    },\n    resetForm() {\n      ElMessageBox.alert(\"重置成功\", '重置成功', {\n        showConfirmButton: true,\n        confirmButtonText: '确认'\n      }).then(() => {\n        this.form.name = '';\n        this.form.password = '';\n        this.form.Twopassword = '';\n      }).catch(() => {\n        console.log('无');\n      });\n      return 0;\n    }\n  }\n};","map":{"version":3,"names":["ElMessageBox","axios","KeyMain","name","data","form","password","Twopassword","methods","submitForm","UsesCheck","passwordCheck","alert","showConfirmButton","confirmButtonText","then","catch","console","log","match","url","$store","state","api","method","params","Date","now","res","error","message","dialogVisible","FilesTyoes","resetForm"],"sources":["D:\\code\\lan\\LAN-Sharing\\restvue003\\src\\components\\ViewLogup\\LogupView.vue"],"sourcesContent":["<template>\r\n    <div   class=\"InputStyle\">\r\n        <el-form :model=\"form\" label-width=\"auto\"  style=\"width: 45%\">\r\n            <el-form-item label=\"用户名:\">\r\n                <el-input v-model=\"form.name\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"密码:\">\r\n                <el-input v-model=\"form.password\" show-password></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"在输入一次密码:\">\r\n                <el-input v-model=\"form.Twopassword\" show-password></el-input>\r\n            </el-form-item>\r\n            <el-button type=\"primary\" @click=\"submitForm()\">注册</el-button>\r\n            <el-button @click=\"resetForm()\">重置</el-button>\r\n        </el-form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {  ElMessageBox } from 'element-plus'\r\nimport axios from 'axios';\r\nimport {KeyMain}from '@/components/Common/KeyMain.js'\r\nexport default{\r\n    name:'LogupView',\r\n    data(){\r\n        return{\r\n            form:{\r\n                name:\"\",\r\n                password:\"\",\r\n                Twopassword:\"\"\r\n            }\r\n        }\r\n    },\r\n    methods:{\r\n        submitForm(){    \r\n            const UsesCheck=/^[A-Za-z0-9_]{6,12}$/\r\n            const passwordCheck=/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&.])[A-Za-z\\d@$!%*?&.]{8,16}$/\r\n            if (this.form.name=='' || this.form.password=='' || this.form.Twopassword==''){\r\n                ElMessageBox.alert(\"用户名和密码不能为空\", '为空检测', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).then(()=>{\r\n                this.form.name='' \r\n                this.form.password=''\r\n                this.form.Twopassword=''\r\n               }).catch(()=>{\r\n                console.log('无');\r\n                \r\n               })\r\n               return 0\r\n            }\r\n            if (this.form.name.match(UsesCheck)==null){\r\n                ElMessageBox.alert(\"用户名只能包含大小写字母、数字和下划线，且长度在6到12个字符之间\", '用户名错误', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).then(()=>{\r\n                this.form.name='' \r\n                this.form.password=''\r\n                this.form.Twopassword=''\r\n                    \r\n               }).catch(()=>{\r\n                console.log('无');\r\n                \r\n               })\r\n               return 0\r\n            }\r\n            if ( this.form.password.match(passwordCheck)==null){\r\n                ElMessageBox.alert(\"一个大写字母、一个小写字母、一个数字和一个特殊字符，且长度至少为8个字符\", '密码错误', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).then(()=>{\r\n                this.form.name='' \r\n                this.form.password=''\r\n                this.form.Twopassword=''  \r\n               }).catch(()=>{\r\n                console.log('无');\r\n                \r\n               })\r\n               \r\n               return 0\r\n            }\r\n            if(this.form.password!=this.form.Twopassword){\r\n                ElMessageBox.alert(\"第一次输入的密码需要第二次一样\", '密码没有重复', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).then(()=>{\r\n                this.form.name='' \r\n                this.form.password=''\r\n                this.form.Twopassword=''\r\n                    \r\n               }).catch(()=>{\r\n                console.log('无');\r\n                \r\n               })\r\n               return 0\r\n            }\r\n            if (this.form.password.match(passwordCheck)!=null && this.form.Twopassword.match(passwordCheck)!=null && this.form.name.match(UsesCheck)!=null && this.form.Twopassword!='' && this.form.password!='' && this.form.name){\r\n                axios({ \r\n                    url:this.$store.state.api+'/Logup',\r\n                    method:\"get\",\r\n                    params:{\r\n                    'name':this.form.name,\r\n                    'MD5AESBehind': KeyMain(this.form.password)  ,\r\n                    'Time':Date.now(),\r\n                }\r\n                }).then(res=>{\r\n                    if(res.data.error=='用户名已经存在,请重新输入用户名'){\r\n                        ElMessageBox.alert(\"用户名已经存在：\"+res.data.message, '用户名已经存在：', {\r\n                        showConfirmButton:true,\r\n                        confirmButtonText: '确认',\r\n               })\r\n                    }\r\n                    ElMessageBox.alert(\"用户创建名为：\"+res.data.message, '用户创建成功', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).then(()=>{\r\n                this.form.name='' \r\n                this.form.password=''\r\n                this.form.Twopassword=''\r\n                this.$store.state.dialogVisible=false\r\n                this.$store.state.FilesTyoes='登录'\r\n                this.$store.state.dialogVisible=true\r\n                \r\n               })\r\n                }).catch(()=>{\r\n                console.log('无');\r\n                \r\n               })\r\n            }\r\n        },\r\n        resetForm(){\r\n            ElMessageBox.alert(\"重置成功\", '重置成功', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).then(()=>{\r\n                this.form.name='' \r\n                this.form.password=''\r\n                this.form.Twopassword=''\r\n               }).catch(()=>{\r\n                console.log('无');\r\n                \r\n               })\r\n               return 0\r\n            \r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n/* .Uses{\r\n   \r\n} */\r\n\r\n.InputStyle{\r\n    padding-bottom: 2%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}