{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    onClick: _cache[0] || (_cache[0] = $event => $options.dropFile($props.dropFiles))\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" 删除文件\")]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_el_button","onClick","_cache","$event","$options","dropFile","$props","dropFiles","default","_withCtx","_createTextVNode","_"],"sources":["C:\\Users\\Administered\\Desktop\\gitclone\\v0.1.0\\restvue003\\src\\components\\dropFiles.vue"],"sourcesContent":["<template>\n    <div>\n        <el-button @click=\"dropFile(dropFiles)\"> 删除文件</el-button>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\n\nexport default {\n    name: 'dropFiles',\n    props: ['dropFiles'],\n    methods: {\n        async dropFile(dropFiles) {\n            await axios({\n                url: this.$store.state.api + '/dropFiles',\n                method: 'get',\n                params: {\n                    'dropFilesName': this.$store.state.DirPath + '/' + dropFiles\n                }\n            }).then(res => {\n                if (res.data.type == '删除文件成功') {\n                    axios({\n                        url: this.$store.state.api + '/DirsFileList',\n                        method: \"post\",\n                        params: {\n                            'DirsFileList': this.$store.state.DirPath\n                        },\n                    }).then(res => {\n                        this.$store.state.DirsFileList = res.data.data\n                        for (let i = 0; i < this.$store.state.DirsFileList.length; i++) {\n                            this.$store.state.DirsFileList[i] = { 'index': i, 'data': this.$store.state.DirsFileList[i], \"FileType\": '查看文件' }\n                            \n                        }\n                        \n                    })\n                }\n                if (res.data.type == '删除文件夹成功') {\n                    axios({\n                        url: this.$store.state.api + '/' + 'DirsFileList',\n                        method: \"post\",\n                        params: {\n                            'DirsFileList': 'no'\n                        }\n                    }).then(res => {\n                        this.$store.state.DirsFileList = res.data.data\n                        for (let i = 0; i < this.$store.state.DirsFileList.length; i++) {\n                            this.$store.state.DirsFileList[i] = { 'index': i, 'data': this.$store.state.DirsFileList[i], \"FileType\": false }\n                        }\n                    })\n                     axios({\n                        url: this.$store.state.api + \"/OpenDir\",\n                        method: 'post',\n                    }).then(res => {\n                        let h = Object.values(res.data.su)\n                        for (let i = 0; i < this.$store.state.DirsFileList.length; i++) {\n                            for (let j = 0; j <= h.length; j++) {\n                                if (this.$store.state.DirsFileList[i].data == h[j]) {\n                                    this.$store.state.DirsFileList[i].FileType = '文件夹'\n                                    break\n                                }\n                            }\n                        }\n\n                    })\n\n                    axios({\n                        url: this.$store.state.api + \"/filesypess\",\n                        method: \"get\",\n                        params: {\n                            'filesypessPath': this.$store.state.DirPath\n                        }\n                    }).then(res => {\n                        this.$store.state.otherDirsType = res.data.data\n                        let h = Object.values(res.data.filesypessPathlistTypes)\n                        for (let i = 0; i < h.length; i++) {\n                            this.$store.state.DirsFileList[h[i].index].FileType = h[i].filesypessPathlistType\n                        }\n                    })\n                }\n            })\n        }\n\n\n    }\n}\n</script>\n<style scoped></style>"],"mappings":";;;uBACIA,mBAAA,CAEM,cADFC,YAAA,CAAyDC,oBAAA;IAA7CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,QAAA,CAAAC,QAAQ,CAACC,MAAA,CAAAC,SAAS;;IAF7CC,OAAA,EAAAC,QAAA,CAEgD,MAAK,CAFrDC,gBAAA,CAEgD,OAAK,E;IAFrDC,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}