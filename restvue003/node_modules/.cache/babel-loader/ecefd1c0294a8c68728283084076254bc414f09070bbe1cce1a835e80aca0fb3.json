{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nexport default {\n  name: 'selectedDir',\n  methods: {\n    selectedDir() {\n      let api = this.$store.state.api;\n      axios({\n        url: this.$store.state.api + '/' + 'selectedDir',\n        method: 'post'\n      }).then(res => {\n        let dirname = res.data.data;\n        ElMessageBox.confirm(dirname, 'Warning', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          type: 'warning'\n        }).then(() => {\n          ElMessage({\n            type: 'success',\n            message: dirname\n          });\n          if (res.data.data != '') {\n            axios({\n              url: api + '/' + 'SucceedselectedDir',\n              method: 'get',\n              params: {\n                'dirname': res.data.data\n              }\n            }).then(res => {\n              this.$store.state.DirPath = res.data.data;\n              console.log(res.data.data);\n              axios({\n                url: this.$store.state.api + '/DirsFileList',\n                method: \"post\",\n                params: {\n                  'DirsFileList': this.$store.state.DirPath\n                }\n              }).then(res => {\n                console.log(res.data.data);\n                this.$store.state.DirsFileList = res.data.data;\n                for (let i = 0; i < this.$store.state.DirsFileList.length; i++) {\n                  this.$store.state.DirsFileList[i] = {\n                    'index': i,\n                    'data': this.$store.state.DirsFileList[i],\n                    \"FileType\": false\n                  };\n                  axios({\n                    url: this.$store.state.api + \"/OpenDir\",\n                    method: 'post'\n                  }).then(res => {\n                    let h = Object.values(res.data.su);\n                    for (let i = 0; i < this.$store.state.DirsFileList.length; i++) {\n                      for (let j = 0; j <= h.length; j++) {\n                        if (this.$store.state.DirsFileList[i].data == h[j]) {\n                          this.$store.state.DirsFileList[i].FileType = '文件夹';\n                          break;\n                        }\n                      }\n                    }\n                    axios({\n                      url: api + \"/filesypess\",\n                      method: \"get\",\n                      params: {\n                        'filesypessPath': this.$store.state.DirPath\n                      }\n                    }).then(res => {\n                      this.$store.state.otherDirsType = res.data.data;\n                      let h = Object.values(res.data.filesypessPathlistTypes);\n                      for (let i = 0; i < h.length; i++) {\n                        this.$store.state.DirsFileList[h[i].index].FileType = h[i].filesypessPathlistType;\n                      }\n                    });\n                  });\n                }\n              });\n            });\n          }\n        }).catch(() => {\n          ElMessage({\n            type: 'info',\n            message: '取消选择'\n          });\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","ElMessage","ElMessageBox","name","methods","selectedDir","api","$store","state","url","method","then","res","dirname","data","confirm","confirmButtonText","cancelButtonText","type","message","params","DirPath","console","log","DirsFileList","i","length","h","Object","values","su","j","FileType","otherDirsType","filesypessPathlistTypes","index","filesypessPathlistType","catch"],"sources":["C:\\git\\v0.1.0\\restvue003\\src\\components\\selectedDir.vue"],"sourcesContent":["<template>\n    <div>\n       <el-button @click=\"selectedDir\">选择根目录</el-button> \n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport {  ElMessage,ElMessageBox } from 'element-plus'\nexport default{\n    name:'selectedDir',\n    methods:{\n        \n        selectedDir(){\n            let api=this.$store.state.api\n            axios({\n                url:this.$store.state.api+'/'+'selectedDir',\n                method:'post'\n            }).then(res=>{\n                let dirname=res.data.data\n                ElMessageBox.confirm(\n                    dirname,\n                    'Warning',{\n                        confirmButtonText: 'OK',\n                        cancelButtonText: 'Cancel',\n                        type: 'warning',\n                    }\n                 ).then(()=>{\n                    ElMessage({\n                        type: 'success',\n                        message: dirname,\n                        })\n                        if(res.data.data!=''){\n                            axios({\n                            url:api+'/'+'SucceedselectedDir',\n                            method:'get',\n                            params:{\n                            'dirname':res.data.data\n                            }\n                        }).then(res=>{\n                            this.$store.state.DirPath=res.data.data\n                            console.log(res.data.data);\n                            axios({\n            url:this.$store.state.api+'/DirsFileList',\n            method:\"post\",\n            params:{\n                            'DirsFileList':this.$store.state.DirPath\n                        },\n        }).then(res=>{\n            console.log(res.data.data);\n            this.$store.state.DirsFileList=res.data.data\n            for(let i=0;i<this.$store.state.DirsFileList.length;i++){\n            this.$store.state.DirsFileList[i]={'index':i,'data':this.$store.state.DirsFileList[i],\"FileType\":false}\n            axios({\n                url:this.$store.state.api+\"/OpenDir\",\n                method:'post',\n            }).then(res=>{\n                let h=Object.values(res.data.su)\n                for(let i=0;i<this.$store.state.DirsFileList.length;i++){\n                    for(let j=0;j<=h.length;j++){\n                        if(this.$store.state.DirsFileList[i].data==h[j]){\n                            this.$store.state.DirsFileList[i].FileType='文件夹'\n                            break\n                        }\n                    }\n                }\n                axios({\n                    url:api+\"/filesypess\",\n                    method:\"get\",\n                    params:{\n                'filesypessPath':this.$store.state.DirPath\n            }\n        }).then(res=>{\n            this.$store.state.otherDirsType=res.data.data\n            let h=Object.values(res.data.filesypessPathlistTypes)\n            for(let i=0;i<h.length;i++){\n                this.$store.state.DirsFileList[h[i].index].FileType=h[i].filesypessPathlistType\n            }\n        })    \n            }) \n        }\n        })\n                        })\n                        \n                        }\n                    \n                 })\n                 .catch(() => {\n                ElMessage({\n                    type: 'info',\n                    message: '取消选择',\n      })\n    })\n            })\n            \n        }\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}