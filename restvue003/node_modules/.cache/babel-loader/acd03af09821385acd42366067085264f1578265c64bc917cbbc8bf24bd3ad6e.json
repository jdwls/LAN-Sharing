{"ast":null,"code":"export function KeyMain(data) {\n  let KeyMainChar = \"2002052820150803\";\n  let KeyMainlist = KeyMainChar.split(\"\");\n  let KeyMainAscll = [];\n  let Passwordlist = data.split(\"\");\n  let PasswordAscll = [];\n  // 密钥转成ASCll码\n  for (let i = 0; i <= KeyMainlist.length - 1; i++) {\n    KeyMainAscll[i] = KeyMainlist[i].charCodeAt();\n  }\n  // 密码转成ASCll码\n  for (let i = 0; i <= Passwordlist.length - 1; i++) {\n    PasswordAscll[i] = Passwordlist[i].charCodeAt();\n  }\n  // 密码补码+到16位\n  if (PasswordAscll.length != 16) {\n    for (let i = PasswordAscll.length; i <= 15; i++) {\n      PasswordAscll[i] = i * 5 - i;\n    }\n    console.log(PasswordAscll);\n  }\n  //  混淆原来的加密密钥\n  for (let i = 0; i <= KeyMainAscll.length - 1; i++) {\n    if (KeyMainAscll[i] + i * (16 - i) <= 127) {\n      KeyMainAscll[i] = KeyMainAscll[i] + i * (16 - i);\n    } else {\n      KeyMainAscll[i] = (KeyMainAscll[i] + i * (16 - i)) / 2;\n    }\n  }\n\n  // 加密数据\n  let PasswordCoryBehind = [];\n  for (let i = 0; i < KeyMainAscll.length; i++) {\n    if (PasswordAscll[i] + KeyMainAscll[i] <= 127) PasswordCoryBehind[i] = PasswordAscll[i] + KeyMainAscll[i];else if (PasswordAscll[i] + KeyMainAscll[i] % 2 == 0) {\n      PasswordCoryBehind[i] = (PasswordAscll[i] + KeyMainAscll[i]) / 2;\n    } else {\n      PasswordCoryBehind[i] = Math.ceil((PasswordAscll[i] + KeyMainAscll[i]) / 2);\n    }\n  }\n  // 加密后转Ascll码\n  let PasswordCoryBehindAScll = [];\n  for (let i = 0; i < PasswordCoryBehind.length; i++) {\n    PasswordCoryBehindAScll[i] = String.fromCharCode(parseInt(PasswordCoryBehind[i]));\n  }\n  // 转成字符串\n  let PasswordCoryBehindChar = \"\";\n  for (let i = 0; i < PasswordCoryBehindAScll.length; i++) {\n    PasswordCoryBehindChar = PasswordCoryBehindChar + PasswordCoryBehindAScll[i];\n  }\n  return PasswordCoryBehindChar;\n}\nexport default KeyMain;","map":{"version":3,"names":["KeyMain","data","KeyMainChar","KeyMainlist","split","KeyMainAscll","Passwordlist","PasswordAscll","i","length","charCodeAt","console","log","PasswordCoryBehind","Math","ceil","PasswordCoryBehindAScll","String","fromCharCode","parseInt","PasswordCoryBehindChar"],"sources":["C:/Users/Admin/Desktop/codes/restvue003/src/components/Common/KeyMain.js"],"sourcesContent":["export function KeyMain(data) {\r\n  let KeyMainChar = \"2002052820150803\";\r\n  let KeyMainlist = KeyMainChar.split(\"\");\r\n  let KeyMainAscll = [];\r\n  let Passwordlist = data.split(\"\");\r\n  let PasswordAscll = [];\r\n  // 密钥转成ASCll码\r\n  for (let i = 0; i <= KeyMainlist.length - 1; i++) {\r\n    KeyMainAscll[i] = KeyMainlist[i].charCodeAt();\r\n  }\r\n  // 密码转成ASCll码\r\n  for (let i = 0; i <= Passwordlist.length - 1; i++) {\r\n    PasswordAscll[i] = Passwordlist[i].charCodeAt();\r\n  }\r\n  // 密码补码+到16位\r\n  if (PasswordAscll.length != 16) {\r\n    for (let i = PasswordAscll.length; i <= 15; i++) {\r\n      PasswordAscll[i] = i * 5 - i;\r\n    }\r\n    console.log(PasswordAscll);\r\n  }\r\n  //  混淆原来的加密密钥\r\n  for (let i = 0; i <= KeyMainAscll.length - 1; i++) {\r\n    if (KeyMainAscll[i] + i * (16 - i) <= 127) {\r\n      KeyMainAscll[i] = KeyMainAscll[i] + i * (16 - i);\r\n    } else {\r\n      KeyMainAscll[i] = (KeyMainAscll[i] + i * (16 - i)) / 2;\r\n    }\r\n  }\r\n\r\n  // 加密数据\r\n  let PasswordCoryBehind = [];\r\n  for (let i = 0; i < KeyMainAscll.length; i++) {\r\n    if (PasswordAscll[i] + KeyMainAscll[i] <= 127)\r\n      PasswordCoryBehind[i] = PasswordAscll[i] + KeyMainAscll[i];\r\n    else if (PasswordAscll[i] + (KeyMainAscll[i] % 2) == 0) {\r\n      PasswordCoryBehind[i] = (PasswordAscll[i] + KeyMainAscll[i]) / 2;\r\n    } else {\r\n      PasswordCoryBehind[i] = Math.ceil(\r\n        (PasswordAscll[i] + KeyMainAscll[i]) / 2\r\n      );\r\n    }\r\n  }\r\n  // 加密后转Ascll码\r\n  let PasswordCoryBehindAScll = [];\r\n  for (let i = 0; i < PasswordCoryBehind.length; i++) {\r\n    PasswordCoryBehindAScll[i] = String.fromCharCode(\r\n      parseInt(PasswordCoryBehind[i])\r\n    );\r\n  }\r\n  // 转成字符串\r\n  let PasswordCoryBehindChar = \"\";\r\n  for (let i = 0; i < PasswordCoryBehindAScll.length; i++) {\r\n    PasswordCoryBehindChar =\r\n      PasswordCoryBehindChar + PasswordCoryBehindAScll[i];\r\n  }\r\n  return PasswordCoryBehindChar;\r\n}\r\nexport default KeyMain;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}