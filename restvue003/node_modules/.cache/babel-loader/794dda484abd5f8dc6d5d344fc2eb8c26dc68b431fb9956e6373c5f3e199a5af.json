{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_el_button, {\n    class: _normalizeClass([{\n      disabled: $data.isDisabled\n    }, \"tets\"]),\n    onClick: $options.topleveldirectory\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" 返回上级目录 \")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"class\", \"onClick\"])]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_el_button","class","_normalizeClass","disabled","$data","isDisabled","onClick","$options","topleveldirectory","default","_withCtx","_createTextVNode","_"],"sources":["C:\\Users\\Admin\\Desktop\\LAN-Sharing-0.1.0\\restvue003\\src\\components\\TopLevelDirectory.vue"],"sourcesContent":["<template>\n    <div>\n        <el-button :class=\"{ disabled: isDisabled }\" @click=\"topleveldirectory\" class=\"tets\">\n            返回上级目录\n        </el-button>\n    </div>\n</template>\n\n<script defer>\nimport axios from 'axios';\n\nexport default {\n    name: \"TopLevelDirectory\",\n    data() {\n        return {\n            isDisabled: false, // 使用Vue的数据驱动控制按钮禁用状态\n        };\n    },\n    methods: {\n       \n        async topleveldirectory() {\n    \n            this.isDisabled = true; // 禁用按钮\n            let m = this.$store.state.DirPath.split('/');\n\n            try {\n                if (m.length > 2) {\n                    // 如果目录层级大于2\n                    const res = await this.getTopLevelDirectory();\n                    if (res.data.data !== '') {\n                        this.$store.state.DirPath = res.data.data;\n                        this.isDisabled = true;\n                    }\n                } else {\n                    // 如果目录层级不大于2，走 OptionDir 流程\n                    const res = await this.getOptionDir();\n                    this.$store.state.DirPath = res.data.data;\n                    await this.updateDirsFileList();\n                }\n            } finally {\n                // 无论成功与否都解除禁用\n                setTimeout(() => {\n                    this.isDisabled = false;\n                }, 1000);\n            }\n        },\n\n        async getTopLevelDirectory() {\n            return axios({\n                url: this.$store.state.api + '/TopLevelDirectory',\n                method: 'get',\n                params: {\n                    'TopLevelDirectoryPathName': this.$store.state.DirPath\n                }\n            });\n        },\n\n        async getOptionDir() {\n            return axios({\n                url: this.$store.state.api + '/OptionDir',\n                method: \"post\"\n            });\n        },\n\n        async updateDirsFileList() {\n            const res = await axios({\n                url: this.$store.state.api + '/DirsFileList',\n                method: \"post\",\n                params: {\n                    'DirsFileList': this.$store.state.DirPath\n                }\n            });\n\n            let dirsFileList = res.data.data.map((item, index) => ({\n                index: index,\n                data: item,\n                FileType: false\n            }));\n\n            // 更新文件类型\n            const dirRes = await this.openDir();\n            const folderList = Object.values(dirRes.data.su);\n            dirsFileList = this.updateFileTypes(dirsFileList, folderList, '文件夹');\n\n            // 获取文件类型并更新\n            const fileTypeRes = await this.getFileTypes();\n            let fileTypes = Object.values(fileTypeRes.data.filesypessPathlistTypes);\n            fileTypes.forEach(type => {\n                dirsFileList[type.index].FileType = type.filesypessPathlistType;\n            });\n\n            // 更新 store 中的文件列表\n            this.$store.state.DirsFileList = dirsFileList;\n        },\n\n        async openDir() {\n            return axios({\n                url: this.$store.state.api + \"/OpenDir\",\n                method: 'post'\n            });\n        },\n\n        async getFileTypes() {\n            return axios({\n                url: this.$store.state.api + \"/filesypess\",\n                method: \"get\",\n                params: {\n                    'filesypessPath': this.$store.state.DirPath\n                }\n            });\n        },\n\n        updateFileTypes(dirsFileList, folderList, folderType) {\n            dirsFileList.forEach(item => {\n                if (folderList.includes(item.data)) {\n                    item.FileType = folderType;\n                }\n            });\n            return dirsFileList;\n        }\n        \n    }\n};\n</script>\n\n<style scoped>\n.disabled {\n    pointer-events: none;\n}\n</style>\n"],"mappings":";;;uBACIA,mBAAA,CAIM,cAHFC,YAAA,CAEYC,oBAAA;IAFAC,KAAK,EAFzBC,eAAA;MAAAC,QAAA,EAEuCC,KAAA,CAAAC;IAAU,GAAqC,MAAM;IAAtCC,OAAK,EAAEC,QAAA,CAAAC;;IAF7DC,OAAA,EAAAC,QAAA,CAE6F,MAErF,CAJRC,gBAAA,CAE6F,UAErF,E;IAJRC,CAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}