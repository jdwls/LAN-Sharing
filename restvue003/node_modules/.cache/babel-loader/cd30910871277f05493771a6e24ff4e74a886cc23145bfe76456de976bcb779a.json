{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * @file stream.js\r\n */\n\n/**\r\n * A lightweight readable stream implemention that handles event dispatching.\r\n *\r\n * @class Stream\r\n */\nvar Stream = /*#__PURE__*/function () {\n  function Stream() {\n    this.listeners = {};\n  }\n  /**\r\n   * Add a listener for a specified event type.\r\n   *\r\n   * @param {string} type the event name\r\n   * @param {Function} listener the callback to be invoked when an event of\r\n   * the specified type occurs\r\n   */\n\n  var _proto = Stream.prototype;\n  _proto.on = function on(type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(listener);\n  }\n  /**\r\n   * Remove a listener for a specified event type.\r\n   *\r\n   * @param {string} type the event name\r\n   * @param {Function} listener  a function previously registered for this\r\n   * type of event through `on`\r\n   * @return {boolean} if we could turn it off or not\r\n   */;\n  _proto.off = function off(type, listener) {\n    if (!this.listeners[type]) {\n      return false;\n    }\n    var index = this.listeners[type].indexOf(listener); // TODO: which is better?\n    // In Video.js we slice listener functions\n    // on trigger so that it does not mess up the order\n    // while we loop through.\n    //\n    // Here we slice on off so that the loop in trigger\n    // can continue using it's old reference to loop without\n    // messing up the order.\n\n    this.listeners[type] = this.listeners[type].slice(0);\n    this.listeners[type].splice(index, 1);\n    return index > -1;\n  }\n  /**\r\n   * Trigger an event of the specified type on this stream. Any additional\r\n   * arguments to this function are passed as parameters to event listeners.\r\n   *\r\n   * @param {string} type the event name\r\n   */;\n  _proto.trigger = function trigger(type) {\n    var callbacks = this.listeners[type];\n    if (!callbacks) {\n      return;\n    } // Slicing the arguments on every invocation of this method\n    // can add a significant amount of overhead. Avoid the\n    // intermediate object creation for the common case of a\n    // single callback argument\n\n    if (arguments.length === 2) {\n      var length = callbacks.length;\n      for (var i = 0; i < length; ++i) {\n        callbacks[i].call(this, arguments[1]);\n      }\n    } else {\n      var args = Array.prototype.slice.call(arguments, 1);\n      var _length = callbacks.length;\n      for (var _i = 0; _i < _length; ++_i) {\n        callbacks[_i].apply(this, args);\n      }\n    }\n  }\n  /**\r\n   * Destroys the stream and cleans up.\r\n   */;\n  _proto.dispose = function dispose() {\n    this.listeners = {};\n  }\n  /**\r\n   * Forwards all `data` events on this stream to the destination stream. The\r\n   * destination stream should provide a method `push` to receive the data\r\n   * events as they arrive.\r\n   *\r\n   * @param {Stream} destination the stream that will receive all `data` events\r\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\r\n   */;\n  _proto.pipe = function pipe(destination) {\n    this.on('data', function (data) {\n      destination.push(data);\n    });\n  };\n  return Stream;\n}();\nexport { Stream as default };","map":{"version":3,"names":["Stream","listeners","_proto","prototype","on","type","listener","push","off","index","indexOf","slice","splice","trigger","callbacks","arguments","length","i","call","args","Array","_length","_i","apply","dispose","pipe","destination","data","default"],"sources":["C:/git/v0.1.0/restvue003/node_modules/@videojs/vhs-utils/es/stream.js"],"sourcesContent":["/**\r\n * @file stream.js\r\n */\r\n\r\n/**\r\n * A lightweight readable stream implemention that handles event dispatching.\r\n *\r\n * @class Stream\r\n */\r\nvar Stream = /*#__PURE__*/function () {\r\n  function Stream() {\r\n    this.listeners = {};\r\n  }\r\n  /**\r\n   * Add a listener for a specified event type.\r\n   *\r\n   * @param {string} type the event name\r\n   * @param {Function} listener the callback to be invoked when an event of\r\n   * the specified type occurs\r\n   */\r\n\r\n\r\n  var _proto = Stream.prototype;\r\n\r\n  _proto.on = function on(type, listener) {\r\n    if (!this.listeners[type]) {\r\n      this.listeners[type] = [];\r\n    }\r\n\r\n    this.listeners[type].push(listener);\r\n  }\r\n  /**\r\n   * Remove a listener for a specified event type.\r\n   *\r\n   * @param {string} type the event name\r\n   * @param {Function} listener  a function previously registered for this\r\n   * type of event through `on`\r\n   * @return {boolean} if we could turn it off or not\r\n   */\r\n  ;\r\n\r\n  _proto.off = function off(type, listener) {\r\n    if (!this.listeners[type]) {\r\n      return false;\r\n    }\r\n\r\n    var index = this.listeners[type].indexOf(listener); // TODO: which is better?\r\n    // In Video.js we slice listener functions\r\n    // on trigger so that it does not mess up the order\r\n    // while we loop through.\r\n    //\r\n    // Here we slice on off so that the loop in trigger\r\n    // can continue using it's old reference to loop without\r\n    // messing up the order.\r\n\r\n    this.listeners[type] = this.listeners[type].slice(0);\r\n    this.listeners[type].splice(index, 1);\r\n    return index > -1;\r\n  }\r\n  /**\r\n   * Trigger an event of the specified type on this stream. Any additional\r\n   * arguments to this function are passed as parameters to event listeners.\r\n   *\r\n   * @param {string} type the event name\r\n   */\r\n  ;\r\n\r\n  _proto.trigger = function trigger(type) {\r\n    var callbacks = this.listeners[type];\r\n\r\n    if (!callbacks) {\r\n      return;\r\n    } // Slicing the arguments on every invocation of this method\r\n    // can add a significant amount of overhead. Avoid the\r\n    // intermediate object creation for the common case of a\r\n    // single callback argument\r\n\r\n\r\n    if (arguments.length === 2) {\r\n      var length = callbacks.length;\r\n\r\n      for (var i = 0; i < length; ++i) {\r\n        callbacks[i].call(this, arguments[1]);\r\n      }\r\n    } else {\r\n      var args = Array.prototype.slice.call(arguments, 1);\r\n      var _length = callbacks.length;\r\n\r\n      for (var _i = 0; _i < _length; ++_i) {\r\n        callbacks[_i].apply(this, args);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Destroys the stream and cleans up.\r\n   */\r\n  ;\r\n\r\n  _proto.dispose = function dispose() {\r\n    this.listeners = {};\r\n  }\r\n  /**\r\n   * Forwards all `data` events on this stream to the destination stream. The\r\n   * destination stream should provide a method `push` to receive the data\r\n   * events as they arrive.\r\n   *\r\n   * @param {Stream} destination the stream that will receive all `data` events\r\n   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options\r\n   */\r\n  ;\r\n\r\n  _proto.pipe = function pipe(destination) {\r\n    this.on('data', function (data) {\r\n      destination.push(data);\r\n    });\r\n  };\r\n\r\n  return Stream;\r\n}();\r\n\r\nexport { Stream as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}