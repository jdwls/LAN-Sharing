{"ast":null,"code":"import { ElMessageBox } from 'element-plus';\nimport CryptoJS from 'crypto-js';\n// import axios from 'axios';\nexport default {\n  name: 'LogLn',\n  data() {\n    return {\n      Uses: \"\",\n      Password: ''\n    };\n  },\n  methods: {\n    LogIn() {\n      // 时间戳\n      const timestamp = Date.now() + '111'.toString();\n      const UsesCheck = /^[A-Za-z0-9_]{6,12}$/;\n      const passwordCheck = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&.])[A-Za-z\\d@$!%*?&.]{8,}$/;\n      if (this.Uses == '' && this.Password == '') {\n        ElMessageBox.alert(\"用户名和密码不能为空\", '为空检测', {\n          showConfirmButton: true,\n          confirmButtonText: '确认'\n        }).catch(() => {\n          this.Uses = '';\n          this.Password = '';\n        });\n        return 0;\n      }\n      if (this.Uses.match(UsesCheck) == null) {\n        ElMessageBox.alert(\"用户名只能包含大小写字母、数字和下划线，且长度在6到12个字符之间\", '用户名错误', {\n          showConfirmButton: true,\n          confirmButtonText: '确认'\n        }).catch(() => {\n          this.Uses = '';\n          this.Password = '';\n        });\n        return 0;\n      }\n      if (this.Password.match(passwordCheck) == null) {\n        ElMessageBox.alert(\"一个大写字母、一个小写字母、一个数字和一个特殊字符，且长度至少为8个字符\", '密码错误', {\n          showConfirmButton: true,\n          confirmButtonText: '确认'\n        }).catch(() => {\n          this.Uses = '';\n          this.Password = '';\n        });\n        console.log(this.Password);\n        return 0;\n      }\n      if (this.Password.match(passwordCheck) != null && this.Uses.match(UsesCheck) != null && this.Uses != '' && this.Password != '') {\n        let MD5AESUses = CryptoJS.AES.encrypt(this.Uses, timestamp).toString();\n        // const decrypted = CryptoJS.AES.decrypt(MD5AESUses, timestamp).toString(CryptoJS.enc.Utf8);\n        // console.log(decrypted,MD5AESUses);\n        let MD5AESPassword = CryptoJS.AES.encrypt(this.Password, timestamp).toString();\n        let MD5AESBefore = MD5AESUses + '2018年' + MD5AESPassword;\n        let MD5AESBehind = CryptoJS.AES.encrypt(MD5AESBefore, timestamp).toString();\n        let text = CryptoJS.AES.decrypt(MD5AESBehind, timestamp).toString(CryptoJS.enc.Utf8);\n        // let text2=CryptoJS.AES.decrypt(text  , timestamp)\n        console.log(text, 10000);\n        // console.log(MD5AESBehind);\n        // console.log(timestamp);\n\n        // axios({ \n        //     url:this.$store.state.api+'/login',\n        //     method:\"get\",\n        //     params:{\n        //     'MD5AESBehind': MD5AESBehind,\n        //     'Time':timestamp,\n        // }\n        // })\n      }\n    }\n  }\n};","map":{"version":3,"names":["ElMessageBox","CryptoJS","name","data","Uses","Password","methods","LogIn","timestamp","Date","now","toString","UsesCheck","passwordCheck","alert","showConfirmButton","confirmButtonText","catch","match","console","log","MD5AESUses","AES","encrypt","MD5AESPassword","MD5AESBefore","MD5AESBehind","text","decrypt","enc","Utf8"],"sources":["C:\\Users\\Admin\\Desktop\\LAN-Sharing-0.1.0\\restvue003\\src\\components\\ViewLogIn\\Login.vue"],"sourcesContent":["<template>\r\n    <div >\r\n        <div class=\"InputStyle\"> \r\n            <span>用户名:</span><el-input v-model=\"Uses\" style=\"width: 30%\" placeholder=\"请输入用户名\" />\r\n        </div>\r\n        <div class=\"InputStyle\">\r\n            <span> 密 码 ：</span><el-input v-model=\"Password\" style=\"width: 30%\" placeholder=\"请输入密码\" type='password' show-password/>\r\n        </div>\r\n        <div class=\"InputStyle\" >\r\n            <el-button @click=LogIn()>登录</el-button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {  ElMessageBox } from 'element-plus'\r\nimport CryptoJS from 'crypto-js';\r\n// import axios from 'axios';\r\nexport default{\r\n    name:'LogLn',\r\n    data(){\r\n        return{\r\n            Uses:\"\",\r\n            Password:''\r\n        }\r\n    },\r\n    methods:{\r\n        LogIn(){\r\n            // 时间戳\r\n            const timestamp = Date.now()+'111'.toString()\r\n            const UsesCheck=/^[A-Za-z0-9_]{6,12}$/\r\n            const passwordCheck=/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&.])[A-Za-z\\d@$!%*?&.]{8,}$/\r\n            if (this.Uses=='' && this.Password=='' ){\r\n                ElMessageBox.alert(\"用户名和密码不能为空\", '为空检测', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).catch(()=>{\r\n                   this.Uses=''\r\n                   this.Password=''\r\n                    \r\n               })\r\n               return 0\r\n            }\r\n            if (this.Uses.match(UsesCheck)==null){\r\n                ElMessageBox.alert(\"用户名只能包含大小写字母、数字和下划线，且长度在6到12个字符之间\", '用户名错误', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).catch(()=>{\r\n                    this.Uses=''\r\n                    this.Password=''\r\n                    \r\n               })\r\n               return 0\r\n            }\r\n            if (this.Password.match(passwordCheck)==null){\r\n                ElMessageBox.alert(\"一个大写字母、一个小写字母、一个数字和一个特殊字符，且长度至少为8个字符\", '密码错误', {\r\n                    showConfirmButton:true,\r\n                    confirmButtonText: '确认',\r\n               }).catch(()=>{\r\n                   this.Uses=''\r\n                   this.Password=''\r\n                    \r\n               })\r\n               console.log(this.Password );\r\n               \r\n               return 0\r\n            }\r\n            if (this.Password.match(passwordCheck)!=null && this.Uses.match(UsesCheck)!=null && this.Uses!='' && this.Password!='' ){\r\n                let MD5AESUses= CryptoJS.AES.encrypt(this.Uses, timestamp).toString();\r\n                // const decrypted = CryptoJS.AES.decrypt(MD5AESUses, timestamp).toString(CryptoJS.enc.Utf8);\r\n                // console.log(decrypted,MD5AESUses);\r\n                let MD5AESPassword= CryptoJS.AES.encrypt(this.Password,timestamp).toString();\r\n                let MD5AESBefore=MD5AESUses+'2018年'+MD5AESPassword\r\n                let MD5AESBehind=CryptoJS.AES.encrypt(MD5AESBefore,timestamp).toString();\r\n                let text=CryptoJS.AES.decrypt(MD5AESBehind, timestamp).toString(CryptoJS.enc.Utf8);\r\n                // let text2=CryptoJS.AES.decrypt(text  , timestamp)\r\n                console.log(text  ,10000)\r\n                // console.log(MD5AESBehind);\r\n                // console.log(timestamp);\r\n                \r\n                // axios({ \r\n                //     url:this.$store.state.api+'/login',\r\n                //     method:\"get\",\r\n                //     params:{\r\n                //     'MD5AESBehind': MD5AESBehind,\r\n                //     'Time':timestamp,\r\n                // }\r\n                // })\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style scoped>\r\n/* .Uses{\r\n   \r\n} */\r\nspan{\r\n    padding-right: 1%; \r\n      \r\n} \r\n.InputStyle{\r\n    padding-bottom: 2%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}