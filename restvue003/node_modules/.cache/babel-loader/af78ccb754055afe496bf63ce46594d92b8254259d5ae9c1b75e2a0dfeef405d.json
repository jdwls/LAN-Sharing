{"ast":null,"code":"import { ElMessageBox } from \"element-plus\";\n// import CryptoJS from 'crypto-js';\nimport axios from \"axios\";\nimport { KeyMain } from \"@/components/Common/KeyMain.js\";\nexport default {\n  name: \"LogLn\",\n  data() {\n    return {\n      form: {\n        name: \"\",\n        password: \"\"\n      }\n    };\n  },\n  methods: {\n    submitForm() {\n      const UsesCheck = /^[A-Za-z0-9_]{6,12}$/;\n      const passwordCheck = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&.])[A-Za-z\\d@$!%*?&.]{8,16}$/;\n      if (this.form.name == \"\" && this.form.password == \"\") {\n        ElMessageBox.alert(\"用户名和密码不能为空\", \"为空检测\", {\n          showConfirmButton: true,\n          confirmButtonText: \"确认\"\n        }).then(() => {\n          this.form.name = \"\";\n          this.form.password = \"\";\n          return 0;\n        }).catch(() => {\n          this.form.name = \"\";\n          this.form.password = \"\";\n          return 0;\n        });\n      }\n      if (this.form.name.match(UsesCheck) == null) {\n        ElMessageBox.alert(\"用户名只能包含大小写字母、数字和下划线，且长度在6到12个字符之间\", \"用户名错误\", {\n          showConfirmButton: true,\n          confirmButtonText: \"确认\"\n        }).then(() => {\n          this.form.name = \"\";\n          this.form.password = \"\";\n          return 0;\n        }).catch(() => {\n          this.form.name = \"\";\n          this.form.password = \"\";\n          return 0;\n        });\n      }\n      if (this.form.password.match(passwordCheck) == null) {\n        ElMessageBox.alert(\"一个大写字母、一个小写字母、一个数字和一个特殊字符，且长度至少为8个字符\", \"密码错误\", {\n          showConfirmButton: true,\n          confirmButtonText: \"确认\"\n        }).then(() => {\n          this.form.name = \"\";\n          this.form.password = \"\";\n          return 0;\n        }).catch(() => {\n          this.form.name = \"\";\n          this.form.password = \"\";\n          return 0;\n        });\n      }\n      if (this.form.password.match(passwordCheck) != null && this.form.name.match(UsesCheck) != null && this.form.name != \"\" && this.form.password != \"\") {\n        axios({\n          url: this.$store.state.api + \"/login\",\n          method: \"get\",\n          params: {\n            name: this.form.name,\n            MD5AESBehind: KeyMain(this.form.password),\n            Time: Date.now()\n          }\n        }).then(res => {\n          if (res.data.message == \"密码正确\") {\n            axios({\n              withCredentials: true,\n              url: this.$store.state.api + \"/Cookie\",\n              method: \"get\",\n              params: {\n                name: this.form.name\n              }\n            }).then(resss => {\n              console.log(resss.headers, \"--------------\", document.cookie);\n            });\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["ElMessageBox","axios","KeyMain","name","data","form","password","methods","submitForm","UsesCheck","passwordCheck","alert","showConfirmButton","confirmButtonText","then","catch","match","url","$store","state","api","method","params","MD5AESBehind","Time","Date","now","res","message","withCredentials","resss","console","log","headers","document","cookie"],"sources":["C:\\Users\\Admin\\Desktop\\codes\\restvue003\\src\\components\\ViewLogIn\\Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"InputStyle\">\r\n    <el-form :model=\"form\" label-width=\"auto\" style=\"width: 45%\">\r\n      <el-form-item label=\"用户名:\">\r\n        <el-input v-model=\"form.name\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"密码:\">\r\n        <el-input v-model=\"form.password\" show-password></el-input>\r\n      </el-form-item>\r\n      <el-button type=\"primary\" @click=\"submitForm()\">登录</el-button>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ElMessageBox } from \"element-plus\";\r\n// import CryptoJS from 'crypto-js';\r\nimport axios from \"axios\";\r\nimport { KeyMain } from \"@/components/Common/KeyMain.js\";\r\nexport default {\r\n  name: \"LogLn\",\r\n  data() {\r\n    return {\r\n      form: {\r\n        name: \"\",\r\n        password: \"\",\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    submitForm() {\r\n      const UsesCheck = /^[A-Za-z0-9_]{6,12}$/;\r\n      const passwordCheck =\r\n        /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&.])[A-Za-z\\d@$!%*?&.]{8,16}$/;\r\n      if (this.form.name == \"\" && this.form.password == \"\") {\r\n        ElMessageBox.alert(\"用户名和密码不能为空\", \"为空检测\", {\r\n          showConfirmButton: true,\r\n          confirmButtonText: \"确认\",\r\n        })\r\n          .then(() => {\r\n            this.form.name = \"\";\r\n            this.form.password = \"\";\r\n            return 0;\r\n          })\r\n          .catch(() => {\r\n            this.form.name = \"\";\r\n            this.form.password = \"\";\r\n            return 0;\r\n          });\r\n      }\r\n      if (this.form.name.match(UsesCheck) == null) {\r\n        ElMessageBox.alert(\r\n          \"用户名只能包含大小写字母、数字和下划线，且长度在6到12个字符之间\",\r\n          \"用户名错误\",\r\n          {\r\n            showConfirmButton: true,\r\n            confirmButtonText: \"确认\",\r\n          }\r\n        )\r\n          .then(() => {\r\n            this.form.name = \"\";\r\n            this.form.password = \"\";\r\n            return 0;\r\n          })\r\n          .catch(() => {\r\n            this.form.name = \"\";\r\n            this.form.password = \"\";\r\n            return 0;\r\n          });\r\n      }\r\n      if (this.form.password.match(passwordCheck) == null) {\r\n        ElMessageBox.alert(\r\n          \"一个大写字母、一个小写字母、一个数字和一个特殊字符，且长度至少为8个字符\",\r\n          \"密码错误\",\r\n          {\r\n            showConfirmButton: true,\r\n            confirmButtonText: \"确认\",\r\n          }\r\n        )\r\n          .then(() => {\r\n            this.form.name = \"\";\r\n            this.form.password = \"\";\r\n            return 0;\r\n          })\r\n          .catch(() => {\r\n            this.form.name = \"\";\r\n            this.form.password = \"\";\r\n            return 0;\r\n          });\r\n      }\r\n      if (\r\n        this.form.password.match(passwordCheck) != null &&\r\n        this.form.name.match(UsesCheck) != null &&\r\n        this.form.name != \"\" &&\r\n        this.form.password != \"\"\r\n      ) {\r\n        axios({\r\n          url: this.$store.state.api + \"/login\",\r\n          method: \"get\",\r\n          params: {\r\n            name: this.form.name,\r\n            MD5AESBehind: KeyMain(this.form.password),\r\n            Time: Date.now(),\r\n          },\r\n        }).then((res) => {\r\n          if (res.data.message == \"密码正确\") {\r\n            axios({\r\n              withCredentials: true,\r\n              url: this.$store.state.api + \"/Cookie\",\r\n              method: \"get\",\r\n              params: {\r\n                name: this.form.name,\r\n              },\r\n            }).then((resss) => {\r\n              console.log(resss.headers, \"--------------\", document.cookie);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n/* .Uses{\r\n   \r\n} */\r\nspan {\r\n  padding-right: 1%;\r\n}\r\n.InputStyle {\r\n  padding-bottom: 2%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-content: center;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}